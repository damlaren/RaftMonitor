// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Tree/Snapshot.proto

#ifndef PROTOBUF_build_2fTree_2fSnapshot_2eproto__INCLUDED
#define PROTOBUF_build_2fTree_2fSnapshot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Tree {
namespace Snapshot {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_build_2fTree_2fSnapshot_2eproto();
void protobuf_AssignDesc_build_2fTree_2fSnapshot_2eproto();
void protobuf_ShutdownFile_build_2fTree_2fSnapshot_2eproto();

class Directory;
class File;

// ===================================================================

class Directory : public ::google::protobuf::Message {
 public:
  Directory();
  virtual ~Directory();

  Directory(const Directory& from);

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Directory& default_instance();

  void Swap(Directory* other);

  // implements Message ----------------------------------------------

  Directory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Directory& from);
  void MergeFrom(const Directory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string directories = 1;
  inline int directories_size() const;
  inline void clear_directories();
  static const int kDirectoriesFieldNumber = 1;
  inline const ::std::string& directories(int index) const;
  inline ::std::string* mutable_directories(int index);
  inline void set_directories(int index, const ::std::string& value);
  inline void set_directories(int index, const char* value);
  inline void set_directories(int index, const char* value, size_t size);
  inline ::std::string* add_directories();
  inline void add_directories(const ::std::string& value);
  inline void add_directories(const char* value);
  inline void add_directories(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& directories() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_directories();

  // repeated string files = 2;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 2;
  inline const ::std::string& files(int index) const;
  inline ::std::string* mutable_files(int index);
  inline void set_files(int index, const ::std::string& value);
  inline void set_files(int index, const char* value);
  inline void set_files(int index, const char* value, size_t size);
  inline ::std::string* add_files();
  inline void add_files(const ::std::string& value);
  inline void add_files(const char* value);
  inline void add_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();

  // @@protoc_insertion_point(class_scope:LogCabin.Tree.Snapshot.Directory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> directories_;
  ::google::protobuf::RepeatedPtrField< ::std::string> files_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fTree_2fSnapshot_2eproto();
  friend void protobuf_AssignDesc_build_2fTree_2fSnapshot_2eproto();
  friend void protobuf_ShutdownFile_build_2fTree_2fSnapshot_2eproto();

  void InitAsDefaultInstance();
  static Directory* default_instance_;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  void Swap(File* other);

  // implements Message ----------------------------------------------

  File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes contents = 1;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:LogCabin.Tree.Snapshot.File)
 private:
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fTree_2fSnapshot_2eproto();
  friend void protobuf_AssignDesc_build_2fTree_2fSnapshot_2eproto();
  friend void protobuf_ShutdownFile_build_2fTree_2fSnapshot_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// ===================================================================


// ===================================================================

// Directory

// repeated string directories = 1;
inline int Directory::directories_size() const {
  return directories_.size();
}
inline void Directory::clear_directories() {
  directories_.Clear();
}
inline const ::std::string& Directory::directories(int index) const {
  return directories_.Get(index);
}
inline ::std::string* Directory::mutable_directories(int index) {
  return directories_.Mutable(index);
}
inline void Directory::set_directories(int index, const ::std::string& value) {
  directories_.Mutable(index)->assign(value);
}
inline void Directory::set_directories(int index, const char* value) {
  directories_.Mutable(index)->assign(value);
}
inline void Directory::set_directories(int index, const char* value, size_t size) {
  directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Directory::add_directories() {
  return directories_.Add();
}
inline void Directory::add_directories(const ::std::string& value) {
  directories_.Add()->assign(value);
}
inline void Directory::add_directories(const char* value) {
  directories_.Add()->assign(value);
}
inline void Directory::add_directories(const char* value, size_t size) {
  directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Directory::directories() const {
  return directories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Directory::mutable_directories() {
  return &directories_;
}

// repeated string files = 2;
inline int Directory::files_size() const {
  return files_.size();
}
inline void Directory::clear_files() {
  files_.Clear();
}
inline const ::std::string& Directory::files(int index) const {
  return files_.Get(index);
}
inline ::std::string* Directory::mutable_files(int index) {
  return files_.Mutable(index);
}
inline void Directory::set_files(int index, const ::std::string& value) {
  files_.Mutable(index)->assign(value);
}
inline void Directory::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
}
inline void Directory::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Directory::add_files() {
  return files_.Add();
}
inline void Directory::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
}
inline void Directory::add_files(const char* value) {
  files_.Add()->assign(value);
}
inline void Directory::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Directory::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Directory::mutable_files() {
  return &files_;
}

// -------------------------------------------------------------------

// File

// required bytes contents = 1;
inline bool File::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& File::contents() const {
  return *contents_;
}
inline void File::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void File::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void File::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* File::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void File::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Snapshot
}  // namespace Tree
}  // namespace LogCabin

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_build_2fTree_2fSnapshot_2eproto__INCLUDED
