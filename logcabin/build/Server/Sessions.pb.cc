// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Server/Sessions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "build/Server/Sessions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Server {
namespace SessionsProto {

namespace {

const ::google::protobuf::Descriptor* Sessions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sessions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_build_2fServer_2fSessions_2eproto() {
  protobuf_AddDesc_build_2fServer_2fSessions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "build/Server/Sessions.proto");
  GOOGLE_CHECK(file != NULL);
  Sessions_descriptor_ = file->message_type(0);
  static const int Sessions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sessions, session_),
  };
  Sessions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sessions_descriptor_,
      Sessions::default_instance_,
      Sessions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sessions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sessions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sessions));
  Session_descriptor_ = file->message_type(1);
  static const int Session_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, last_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, first_outstanding_rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, rpc_response_),
  };
  Session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Session_descriptor_,
      Session::default_instance_,
      Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Session));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, rpc_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_build_2fServer_2fSessions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sessions_descriptor_, &Sessions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Session_descriptor_, &Session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_build_2fServer_2fSessions_2eproto() {
  delete Sessions::default_instance_;
  delete Sessions_reflection_;
  delete Session::default_instance_;
  delete Session_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_build_2fServer_2fSessions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogCabin::Protocol::Client::protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033build/Server/Sessions.proto\022\035LogCabin."
    "Server.SessionsProto\032\033build/Protocol/Cli"
    "ent.proto\"C\n\010Sessions\0227\n\007session\030\001 \003(\0132&"
    ".LogCabin.Server.SessionsProto.Session\"\221"
    "\001\n\007Session\022\021\n\tclient_id\030\001 \002(\004\022\025\n\rlast_mo"
    "dified\030\004 \002(\004\022\035\n\025first_outstanding_rpc\030\002 "
    "\002(\004\022=\n\014rpc_response\030\003 \003(\0132\'.LogCabin.Ser"
    "ver.SessionsProto.Response\"[\n\010Response\022\022"
    "\n\nrpc_number\030\001 \002(\004\022;\n\010response\030\002 \002(\0132).L"
    "ogCabin.Protocol.Client.CommandResponse", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "build/Server/Sessions.proto", &protobuf_RegisterTypes);
  Sessions::default_instance_ = new Sessions();
  Session::default_instance_ = new Session();
  Response::default_instance_ = new Response();
  Sessions::default_instance_->InitAsDefaultInstance();
  Session::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_build_2fServer_2fSessions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_build_2fServer_2fSessions_2eproto {
  StaticDescriptorInitializer_build_2fServer_2fSessions_2eproto() {
    protobuf_AddDesc_build_2fServer_2fSessions_2eproto();
  }
} static_descriptor_initializer_build_2fServer_2fSessions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Sessions::kSessionFieldNumber;
#endif  // !_MSC_VER

Sessions::Sessions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sessions::InitAsDefaultInstance() {
}

Sessions::Sessions(const Sessions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sessions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sessions::~Sessions() {
  SharedDtor();
}

void Sessions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sessions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sessions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sessions_descriptor_;
}

const Sessions& Sessions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fServer_2fSessions_2eproto();
  return *default_instance_;
}

Sessions* Sessions::default_instance_ = NULL;

Sessions* Sessions::New() const {
  return new Sessions;
}

void Sessions::Clear() {
  session_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sessions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LogCabin.Server.SessionsProto.Session session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_session;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sessions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LogCabin.Server.SessionsProto.Session session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sessions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .LogCabin.Server.SessionsProto.Session session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sessions::ByteSize() const {
  int total_size = 0;

  // repeated .LogCabin.Server.SessionsProto.Session session = 1;
  total_size += 1 * this->session_size();
  for (int i = 0; i < this->session_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sessions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sessions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sessions::MergeFrom(const Sessions& from) {
  GOOGLE_CHECK_NE(&from, this);
  session_.MergeFrom(from.session_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sessions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sessions::CopyFrom(const Sessions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions::IsInitialized() const {

  for (int i = 0; i < session_size(); i++) {
    if (!this->session(i).IsInitialized()) return false;
  }
  return true;
}

void Sessions::Swap(Sessions* other) {
  if (other != this) {
    session_.Swap(&other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sessions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sessions_descriptor_;
  metadata.reflection = Sessions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Session::kClientIdFieldNumber;
const int Session::kLastModifiedFieldNumber;
const int Session::kFirstOutstandingRpcFieldNumber;
const int Session::kRpcResponseFieldNumber;
#endif  // !_MSC_VER

Session::Session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Session::InitAsDefaultInstance() {
}

Session::Session(const Session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  last_modified_ = GOOGLE_ULONGLONG(0);
  first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Session::~Session() {
  SharedDtor();
}

void Session::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Session_descriptor_;
}

const Session& Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fServer_2fSessions_2eproto();
  return *default_instance_;
}

Session* Session::default_instance_ = NULL;

Session* Session::New() const {
  return new Session;
}

void Session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = GOOGLE_ULONGLONG(0);
    last_modified_ = GOOGLE_ULONGLONG(0);
    first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
  }
  rpc_response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_outstanding_rpc;
        break;
      }

      // required uint64 first_outstanding_rpc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_outstanding_rpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_outstanding_rpc_)));
          set_has_first_outstanding_rpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rpc_response;
        break;
      }

      // repeated .LogCabin.Server.SessionsProto.Response rpc_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpc_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpc_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rpc_response;
        if (input->ExpectTag(32)) goto parse_last_modified;
        break;
      }

      // required uint64 last_modified = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_modified_)));
          set_has_last_modified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // required uint64 first_outstanding_rpc = 2;
  if (has_first_outstanding_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->first_outstanding_rpc(), output);
  }

  // repeated .LogCabin.Server.SessionsProto.Response rpc_response = 3;
  for (int i = 0; i < this->rpc_response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rpc_response(i), output);
  }

  // required uint64 last_modified = 4;
  if (has_last_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_modified(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // required uint64 first_outstanding_rpc = 2;
  if (has_first_outstanding_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->first_outstanding_rpc(), target);
  }

  // repeated .LogCabin.Server.SessionsProto.Response rpc_response = 3;
  for (int i = 0; i < this->rpc_response_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rpc_response(i), target);
  }

  // required uint64 last_modified = 4;
  if (has_last_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_modified(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // required uint64 last_modified = 4;
    if (has_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_modified());
    }

    // required uint64 first_outstanding_rpc = 2;
    if (has_first_outstanding_rpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_outstanding_rpc());
    }

  }
  // repeated .LogCabin.Server.SessionsProto.Response rpc_response = 3;
  total_size += 1 * this->rpc_response_size();
  for (int i = 0; i < this->rpc_response_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpc_response(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpc_response_.MergeFrom(from.rpc_response_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_last_modified()) {
      set_last_modified(from.last_modified());
    }
    if (from.has_first_outstanding_rpc()) {
      set_first_outstanding_rpc(from.first_outstanding_rpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < rpc_response_size(); i++) {
    if (!this->rpc_response(i).IsInitialized()) return false;
  }
  return true;
}

void Session::Swap(Session* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(last_modified_, other->last_modified_);
    std::swap(first_outstanding_rpc_, other->first_outstanding_rpc_);
    rpc_response_.Swap(&other->rpc_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Session_descriptor_;
  metadata.reflection = Session_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kRpcNumberFieldNumber;
const int Response::kResponseFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  response_ = const_cast< ::LogCabin::Protocol::Client::CommandResponse*>(&::LogCabin::Protocol::Client::CommandResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  rpc_number_ = GOOGLE_ULONGLONG(0);
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fServer_2fSessions_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rpc_number_ = GOOGLE_ULONGLONG(0);
    if (has_response()) {
      if (response_ != NULL) response_->::LogCabin::Protocol::Client::CommandResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rpc_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rpc_number_)));
          set_has_rpc_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // required .LogCabin.Protocol.Client.CommandResponse response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 rpc_number = 1;
  if (has_rpc_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rpc_number(), output);
  }

  // required .LogCabin.Protocol.Client.CommandResponse response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 rpc_number = 1;
  if (has_rpc_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rpc_number(), target);
  }

  // required .LogCabin.Protocol.Client.CommandResponse response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 rpc_number = 1;
    if (has_rpc_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rpc_number());
    }

    // required .LogCabin.Protocol.Client.CommandResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_number()) {
      set_rpc_number(from.rpc_number());
    }
    if (from.has_response()) {
      mutable_response()->::LogCabin::Protocol::Client::CommandResponse::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(rpc_number_, other->rpc_number_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SessionsProto
}  // namespace Server
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
