// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Server/SnapshotMetadata.proto

#ifndef PROTOBUF_build_2fServer_2fSnapshotMetadata_2eproto__INCLUDED
#define PROTOBUF_build_2fServer_2fSnapshotMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "build/Protocol/Raft.pb.h"
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Server {
namespace SnapshotMetadata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_build_2fServer_2fSnapshotMetadata_2eproto();
void protobuf_AssignDesc_build_2fServer_2fSnapshotMetadata_2eproto();
void protobuf_ShutdownFile_build_2fServer_2fSnapshotMetadata_2eproto();

class Header;

// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 last_included_index = 1;
  inline bool has_last_included_index() const;
  inline void clear_last_included_index();
  static const int kLastIncludedIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 last_included_index() const;
  inline void set_last_included_index(::google::protobuf::uint64 value);

  // required uint64 last_included_term = 4;
  inline bool has_last_included_term() const;
  inline void clear_last_included_term();
  static const int kLastIncludedTermFieldNumber = 4;
  inline ::google::protobuf::uint64 last_included_term() const;
  inline void set_last_included_term(::google::protobuf::uint64 value);

  // optional .LogCabin.Protocol.Raft.Configuration configuration = 2;
  inline bool has_configuration() const;
  inline void clear_configuration();
  static const int kConfigurationFieldNumber = 2;
  inline const ::LogCabin::Protocol::Raft::Configuration& configuration() const;
  inline ::LogCabin::Protocol::Raft::Configuration* mutable_configuration();
  inline ::LogCabin::Protocol::Raft::Configuration* release_configuration();
  inline void set_allocated_configuration(::LogCabin::Protocol::Raft::Configuration* configuration);

  // optional uint64 configuration_index = 3;
  inline bool has_configuration_index() const;
  inline void clear_configuration_index();
  static const int kConfigurationIndexFieldNumber = 3;
  inline ::google::protobuf::uint64 configuration_index() const;
  inline void set_configuration_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Server.SnapshotMetadata.Header)
 private:
  inline void set_has_last_included_index();
  inline void clear_has_last_included_index();
  inline void set_has_last_included_term();
  inline void clear_has_last_included_term();
  inline void set_has_configuration();
  inline void clear_has_configuration();
  inline void set_has_configuration_index();
  inline void clear_has_configuration_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_included_index_;
  ::google::protobuf::uint64 last_included_term_;
  ::LogCabin::Protocol::Raft::Configuration* configuration_;
  ::google::protobuf::uint64 configuration_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fServer_2fSnapshotMetadata_2eproto();
  friend void protobuf_AssignDesc_build_2fServer_2fSnapshotMetadata_2eproto();
  friend void protobuf_ShutdownFile_build_2fServer_2fSnapshotMetadata_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// required uint64 last_included_index = 1;
inline bool Header::has_last_included_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_last_included_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_last_included_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_last_included_index() {
  last_included_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_included_index();
}
inline ::google::protobuf::uint64 Header::last_included_index() const {
  return last_included_index_;
}
inline void Header::set_last_included_index(::google::protobuf::uint64 value) {
  set_has_last_included_index();
  last_included_index_ = value;
}

// required uint64 last_included_term = 4;
inline bool Header::has_last_included_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_last_included_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_last_included_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_last_included_term() {
  last_included_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_included_term();
}
inline ::google::protobuf::uint64 Header::last_included_term() const {
  return last_included_term_;
}
inline void Header::set_last_included_term(::google::protobuf::uint64 value) {
  set_has_last_included_term();
  last_included_term_ = value;
}

// optional .LogCabin.Protocol.Raft.Configuration configuration = 2;
inline bool Header::has_configuration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_configuration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_configuration() {
  if (configuration_ != NULL) configuration_->::LogCabin::Protocol::Raft::Configuration::Clear();
  clear_has_configuration();
}
inline const ::LogCabin::Protocol::Raft::Configuration& Header::configuration() const {
  return configuration_ != NULL ? *configuration_ : *default_instance_->configuration_;
}
inline ::LogCabin::Protocol::Raft::Configuration* Header::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) configuration_ = new ::LogCabin::Protocol::Raft::Configuration;
  return configuration_;
}
inline ::LogCabin::Protocol::Raft::Configuration* Header::release_configuration() {
  clear_has_configuration();
  ::LogCabin::Protocol::Raft::Configuration* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
inline void Header::set_allocated_configuration(::LogCabin::Protocol::Raft::Configuration* configuration) {
  delete configuration_;
  configuration_ = configuration;
  if (configuration) {
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
}

// optional uint64 configuration_index = 3;
inline bool Header::has_configuration_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_configuration_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_configuration_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_configuration_index() {
  configuration_index_ = GOOGLE_ULONGLONG(0);
  clear_has_configuration_index();
}
inline ::google::protobuf::uint64 Header::configuration_index() const {
  return configuration_index_;
}
inline void Header::set_configuration_index(::google::protobuf::uint64 value) {
  set_has_configuration_index();
  configuration_index_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SnapshotMetadata
}  // namespace Server
}  // namespace LogCabin

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_build_2fServer_2fSnapshotMetadata_2eproto__INCLUDED
