// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Storage/SimpleFileLog.proto

#ifndef PROTOBUF_build_2fStorage_2fSimpleFileLog_2eproto__INCLUDED
#define PROTOBUF_build_2fStorage_2fSimpleFileLog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "build/Protocol/RaftLogMetadata.pb.h"
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Storage {
namespace SimpleFileLogMetadata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_build_2fStorage_2fSimpleFileLog_2eproto();
void protobuf_AssignDesc_build_2fStorage_2fSimpleFileLog_2eproto();
void protobuf_ShutdownFile_build_2fStorage_2fSimpleFileLog_2eproto();

class Metadata;

// ===================================================================

class Metadata : public ::google::protobuf::Message {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  void Swap(Metadata* other);

  // implements Message ----------------------------------------------

  Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // required .LogCabin.Protocol.RaftLogMetadata.Metadata raft_metadata = 2;
  inline bool has_raft_metadata() const;
  inline void clear_raft_metadata();
  static const int kRaftMetadataFieldNumber = 2;
  inline const ::LogCabin::Protocol::RaftLogMetadata::Metadata& raft_metadata() const;
  inline ::LogCabin::Protocol::RaftLogMetadata::Metadata* mutable_raft_metadata();
  inline ::LogCabin::Protocol::RaftLogMetadata::Metadata* release_raft_metadata();
  inline void set_allocated_raft_metadata(::LogCabin::Protocol::RaftLogMetadata::Metadata* raft_metadata);

  // required uint64 entries_start = 3;
  inline bool has_entries_start() const;
  inline void clear_entries_start();
  static const int kEntriesStartFieldNumber = 3;
  inline ::google::protobuf::uint64 entries_start() const;
  inline void set_entries_start(::google::protobuf::uint64 value);

  // required uint64 entries_end = 4;
  inline bool has_entries_end() const;
  inline void clear_entries_end();
  static const int kEntriesEndFieldNumber = 4;
  inline ::google::protobuf::uint64 entries_end() const;
  inline void set_entries_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Storage.SimpleFileLogMetadata.Metadata)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_raft_metadata();
  inline void clear_has_raft_metadata();
  inline void set_has_entries_start();
  inline void clear_has_entries_start();
  inline void set_has_entries_end();
  inline void clear_has_entries_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 version_;
  ::LogCabin::Protocol::RaftLogMetadata::Metadata* raft_metadata_;
  ::google::protobuf::uint64 entries_start_;
  ::google::protobuf::uint64 entries_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fStorage_2fSimpleFileLog_2eproto();
  friend void protobuf_AssignDesc_build_2fStorage_2fSimpleFileLog_2eproto();
  friend void protobuf_ShutdownFile_build_2fStorage_2fSimpleFileLog_2eproto();

  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// ===================================================================


// ===================================================================

// Metadata

// required uint64 version = 1;
inline bool Metadata::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadata::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadata::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadata::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 Metadata::version() const {
  return version_;
}
inline void Metadata::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
}

// required .LogCabin.Protocol.RaftLogMetadata.Metadata raft_metadata = 2;
inline bool Metadata::has_raft_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadata::set_has_raft_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadata::clear_has_raft_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadata::clear_raft_metadata() {
  if (raft_metadata_ != NULL) raft_metadata_->::LogCabin::Protocol::RaftLogMetadata::Metadata::Clear();
  clear_has_raft_metadata();
}
inline const ::LogCabin::Protocol::RaftLogMetadata::Metadata& Metadata::raft_metadata() const {
  return raft_metadata_ != NULL ? *raft_metadata_ : *default_instance_->raft_metadata_;
}
inline ::LogCabin::Protocol::RaftLogMetadata::Metadata* Metadata::mutable_raft_metadata() {
  set_has_raft_metadata();
  if (raft_metadata_ == NULL) raft_metadata_ = new ::LogCabin::Protocol::RaftLogMetadata::Metadata;
  return raft_metadata_;
}
inline ::LogCabin::Protocol::RaftLogMetadata::Metadata* Metadata::release_raft_metadata() {
  clear_has_raft_metadata();
  ::LogCabin::Protocol::RaftLogMetadata::Metadata* temp = raft_metadata_;
  raft_metadata_ = NULL;
  return temp;
}
inline void Metadata::set_allocated_raft_metadata(::LogCabin::Protocol::RaftLogMetadata::Metadata* raft_metadata) {
  delete raft_metadata_;
  raft_metadata_ = raft_metadata;
  if (raft_metadata) {
    set_has_raft_metadata();
  } else {
    clear_has_raft_metadata();
  }
}

// required uint64 entries_start = 3;
inline bool Metadata::has_entries_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metadata::set_has_entries_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metadata::clear_has_entries_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metadata::clear_entries_start() {
  entries_start_ = GOOGLE_ULONGLONG(0);
  clear_has_entries_start();
}
inline ::google::protobuf::uint64 Metadata::entries_start() const {
  return entries_start_;
}
inline void Metadata::set_entries_start(::google::protobuf::uint64 value) {
  set_has_entries_start();
  entries_start_ = value;
}

// required uint64 entries_end = 4;
inline bool Metadata::has_entries_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metadata::set_has_entries_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metadata::clear_has_entries_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metadata::clear_entries_end() {
  entries_end_ = GOOGLE_ULONGLONG(0);
  clear_has_entries_end();
}
inline ::google::protobuf::uint64 Metadata::entries_end() const {
  return entries_end_;
}
inline void Metadata::set_entries_end(::google::protobuf::uint64 value) {
  set_has_entries_end();
  entries_end_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SimpleFileLogMetadata
}  // namespace Storage
}  // namespace LogCabin

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_build_2fStorage_2fSimpleFileLog_2eproto__INCLUDED
