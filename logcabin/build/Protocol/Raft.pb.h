// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Protocol/Raft.proto

#ifndef PROTOBUF_build_2fProtocol_2fRaft_2eproto__INCLUDED
#define PROTOBUF_build_2fProtocol_2fRaft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {
namespace Raft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

class Error;
class Server;
class SimpleConfiguration;
class Configuration;
class Entry;
class RequestVote;
class RequestVote_Request;
class RequestVote_Response;
class AppendEntries;
class AppendEntries_Request;
class AppendEntries_Response;
class AppendSnapshotChunk;
class AppendSnapshotChunk_Request;
class AppendSnapshotChunk_Response;

enum OpCode {
  GET_SUPPORTED_RPC_VERSIONS = 0,
  REQUEST_VOTE = 1,
  APPEND_ENTRIES = 2,
  APPEND_SNAPSHOT_CHUNK = 3
};
bool OpCode_IsValid(int value);
const OpCode OpCode_MIN = GET_SUPPORTED_RPC_VERSIONS;
const OpCode OpCode_MAX = APPEND_SNAPSHOT_CHUNK;
const int OpCode_ARRAYSIZE = OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpCode_descriptor();
inline const ::std::string& OpCode_Name(OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpCode_descriptor(), value);
}
inline bool OpCode_Parse(
    const ::std::string& name, OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpCode>(
    OpCode_descriptor(), name, value);
}
enum EntryType {
  CONFIGURATION = 1,
  DATA = 2,
  NOOP = 3
};
bool EntryType_IsValid(int value);
const EntryType EntryType_MIN = CONFIGURATION;
const EntryType EntryType_MAX = NOOP;
const int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntryType_descriptor();
inline const ::std::string& EntryType_Name(EntryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntryType_descriptor(), value);
}
inline bool EntryType_Parse(
    const ::std::string& name, EntryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.Error)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class Server : public ::google::protobuf::Message {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();

  void Swap(Server* other);

  // implements Message ----------------------------------------------

  Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.Server)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 server_id_;
  ::std::string* address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// -------------------------------------------------------------------

class SimpleConfiguration : public ::google::protobuf::Message {
 public:
  SimpleConfiguration();
  virtual ~SimpleConfiguration();

  SimpleConfiguration(const SimpleConfiguration& from);

  inline SimpleConfiguration& operator=(const SimpleConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleConfiguration& default_instance();

  void Swap(SimpleConfiguration* other);

  // implements Message ----------------------------------------------

  SimpleConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleConfiguration& from);
  void MergeFrom(const SimpleConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LogCabin.Protocol.Raft.Server servers = 1;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 1;
  inline const ::LogCabin::Protocol::Raft::Server& servers(int index) const;
  inline ::LogCabin::Protocol::Raft::Server* mutable_servers(int index);
  inline ::LogCabin::Protocol::Raft::Server* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Server >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Server >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.SimpleConfiguration)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Server > servers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static SimpleConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class Configuration : public ::google::protobuf::Message {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  void Swap(Configuration* other);

  // implements Message ----------------------------------------------

  Configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .LogCabin.Protocol.Raft.SimpleConfiguration prev_configuration = 1;
  inline bool has_prev_configuration() const;
  inline void clear_prev_configuration();
  static const int kPrevConfigurationFieldNumber = 1;
  inline const ::LogCabin::Protocol::Raft::SimpleConfiguration& prev_configuration() const;
  inline ::LogCabin::Protocol::Raft::SimpleConfiguration* mutable_prev_configuration();
  inline ::LogCabin::Protocol::Raft::SimpleConfiguration* release_prev_configuration();
  inline void set_allocated_prev_configuration(::LogCabin::Protocol::Raft::SimpleConfiguration* prev_configuration);

  // optional .LogCabin.Protocol.Raft.SimpleConfiguration next_configuration = 2;
  inline bool has_next_configuration() const;
  inline void clear_next_configuration();
  static const int kNextConfigurationFieldNumber = 2;
  inline const ::LogCabin::Protocol::Raft::SimpleConfiguration& next_configuration() const;
  inline ::LogCabin::Protocol::Raft::SimpleConfiguration* mutable_next_configuration();
  inline ::LogCabin::Protocol::Raft::SimpleConfiguration* release_next_configuration();
  inline void set_allocated_next_configuration(::LogCabin::Protocol::Raft::SimpleConfiguration* next_configuration);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.Configuration)
 private:
  inline void set_has_prev_configuration();
  inline void clear_has_prev_configuration();
  inline void set_has_next_configuration();
  inline void clear_has_next_configuration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::LogCabin::Protocol::Raft::SimpleConfiguration* prev_configuration_;
  ::LogCabin::Protocol::Raft::SimpleConfiguration* next_configuration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static Configuration* default_instance_;
};
// -------------------------------------------------------------------

class Entry : public ::google::protobuf::Message {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  void Swap(Entry* other);

  // implements Message ----------------------------------------------

  Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required .LogCabin.Protocol.Raft.EntryType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::LogCabin::Protocol::Raft::EntryType type() const;
  inline void set_type(::LogCabin::Protocol::Raft::EntryType value);

  // optional .LogCabin.Protocol.Raft.Configuration configuration = 3;
  inline bool has_configuration() const;
  inline void clear_configuration();
  static const int kConfigurationFieldNumber = 3;
  inline const ::LogCabin::Protocol::Raft::Configuration& configuration() const;
  inline ::LogCabin::Protocol::Raft::Configuration* mutable_configuration();
  inline ::LogCabin::Protocol::Raft::Configuration* release_configuration();
  inline void set_allocated_configuration(::LogCabin::Protocol::Raft::Configuration* configuration);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.Entry)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_configuration();
  inline void clear_has_configuration();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::LogCabin::Protocol::Raft::Configuration* configuration_;
  ::std::string* data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class RequestVote_Request : public ::google::protobuf::Message {
 public:
  RequestVote_Request();
  virtual ~RequestVote_Request();

  RequestVote_Request(const RequestVote_Request& from);

  inline RequestVote_Request& operator=(const RequestVote_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVote_Request& default_instance();

  void Swap(RequestVote_Request* other);

  // implements Message ----------------------------------------------

  RequestVote_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVote_Request& from);
  void MergeFrom(const RequestVote_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required uint64 recipient_id = 5;
  inline bool has_recipient_id() const;
  inline void clear_recipient_id();
  static const int kRecipientIdFieldNumber = 5;
  inline ::google::protobuf::uint64 recipient_id() const;
  inline void set_recipient_id(::google::protobuf::uint64 value);

  // required uint64 term = 2;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 2;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 last_log_term = 3;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 3;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // required uint64 last_log_index = 4;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.RequestVote.Request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_recipient_id();
  inline void clear_has_recipient_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 recipient_id_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static RequestVote_Request* default_instance_;
};
// -------------------------------------------------------------------

class RequestVote_Response : public ::google::protobuf::Message {
 public:
  RequestVote_Response();
  virtual ~RequestVote_Response();

  RequestVote_Response(const RequestVote_Response& from);

  inline RequestVote_Response& operator=(const RequestVote_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVote_Response& default_instance();

  void Swap(RequestVote_Response* other);

  // implements Message ----------------------------------------------

  RequestVote_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVote_Response& from);
  void MergeFrom(const RequestVote_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool granted = 2;
  inline bool has_granted() const;
  inline void clear_granted();
  static const int kGrantedFieldNumber = 2;
  inline bool granted() const;
  inline void set_granted(bool value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.RequestVote.Response)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_granted();
  inline void clear_has_granted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  bool granted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static RequestVote_Response* default_instance_;
};
// -------------------------------------------------------------------

class RequestVote : public ::google::protobuf::Message {
 public:
  RequestVote();
  virtual ~RequestVote();

  RequestVote(const RequestVote& from);

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVote& default_instance();

  void Swap(RequestVote* other);

  // implements Message ----------------------------------------------

  RequestVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVote& from);
  void MergeFrom(const RequestVote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RequestVote_Request Request;
  typedef RequestVote_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.RequestVote)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static RequestVote* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntries_Request : public ::google::protobuf::Message {
 public:
  AppendEntries_Request();
  virtual ~AppendEntries_Request();

  AppendEntries_Request(const AppendEntries_Request& from);

  inline AppendEntries_Request& operator=(const AppendEntries_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntries_Request& default_instance();

  void Swap(AppendEntries_Request* other);

  // implements Message ----------------------------------------------

  AppendEntries_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntries_Request& from);
  void MergeFrom(const AppendEntries_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required uint64 recipient_id = 7;
  inline bool has_recipient_id() const;
  inline void clear_recipient_id();
  static const int kRecipientIdFieldNumber = 7;
  inline ::google::protobuf::uint64 recipient_id() const;
  inline void set_recipient_id(::google::protobuf::uint64 value);

  // required uint64 term = 2;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 2;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 prev_log_index = 3;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  inline ::google::protobuf::uint64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::uint64 value);

  // required uint64 prev_log_term = 4;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  inline ::google::protobuf::uint64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::uint64 value);

  // repeated .LogCabin.Protocol.Raft.Entry entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::LogCabin::Protocol::Raft::Entry& entries(int index) const;
  inline ::LogCabin::Protocol::Raft::Entry* mutable_entries(int index);
  inline ::LogCabin::Protocol::Raft::Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Entry >*
      mutable_entries();

  // required uint64 commit_index = 6;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 6;
  inline ::google::protobuf::uint64 commit_index() const;
  inline void set_commit_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.AppendEntries.Request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_recipient_id();
  inline void clear_has_recipient_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 recipient_id_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prev_log_index_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Entry > entries_;
  ::google::protobuf::uint64 commit_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntries_Request* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntries_Response : public ::google::protobuf::Message {
 public:
  AppendEntries_Response();
  virtual ~AppendEntries_Response();

  AppendEntries_Response(const AppendEntries_Response& from);

  inline AppendEntries_Response& operator=(const AppendEntries_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntries_Response& default_instance();

  void Swap(AppendEntries_Response* other);

  // implements Message ----------------------------------------------

  AppendEntries_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntries_Response& from);
  void MergeFrom(const AppendEntries_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.AppendEntries.Response)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntries_Response* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntries : public ::google::protobuf::Message {
 public:
  AppendEntries();
  virtual ~AppendEntries();

  AppendEntries(const AppendEntries& from);

  inline AppendEntries& operator=(const AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntries& default_instance();

  void Swap(AppendEntries* other);

  // implements Message ----------------------------------------------

  AppendEntries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntries& from);
  void MergeFrom(const AppendEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AppendEntries_Request Request;
  typedef AppendEntries_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.AppendEntries)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntries* default_instance_;
};
// -------------------------------------------------------------------

class AppendSnapshotChunk_Request : public ::google::protobuf::Message {
 public:
  AppendSnapshotChunk_Request();
  virtual ~AppendSnapshotChunk_Request();

  AppendSnapshotChunk_Request(const AppendSnapshotChunk_Request& from);

  inline AppendSnapshotChunk_Request& operator=(const AppendSnapshotChunk_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendSnapshotChunk_Request& default_instance();

  void Swap(AppendSnapshotChunk_Request* other);

  // implements Message ----------------------------------------------

  AppendSnapshotChunk_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendSnapshotChunk_Request& from);
  void MergeFrom(const AppendSnapshotChunk_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required uint64 recipient_id = 2;
  inline bool has_recipient_id() const;
  inline void clear_recipient_id();
  static const int kRecipientIdFieldNumber = 2;
  inline ::google::protobuf::uint64 recipient_id() const;
  inline void set_recipient_id(::google::protobuf::uint64 value);

  // required uint64 term = 3;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 3;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 last_snapshot_index = 4;
  inline bool has_last_snapshot_index() const;
  inline void clear_last_snapshot_index();
  static const int kLastSnapshotIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 last_snapshot_index() const;
  inline void set_last_snapshot_index(::google::protobuf::uint64 value);

  // required uint64 byte_offset = 5;
  inline bool has_byte_offset() const;
  inline void clear_byte_offset();
  static const int kByteOffsetFieldNumber = 5;
  inline ::google::protobuf::uint64 byte_offset() const;
  inline void set_byte_offset(::google::protobuf::uint64 value);

  // required bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required bool done = 7;
  inline bool has_done() const;
  inline void clear_done();
  static const int kDoneFieldNumber = 7;
  inline bool done() const;
  inline void set_done(bool value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.AppendSnapshotChunk.Request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_recipient_id();
  inline void clear_has_recipient_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_last_snapshot_index();
  inline void clear_has_last_snapshot_index();
  inline void set_has_byte_offset();
  inline void clear_has_byte_offset();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_done();
  inline void clear_has_done();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 recipient_id_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_snapshot_index_;
  ::google::protobuf::uint64 byte_offset_;
  ::std::string* data_;
  bool done_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static AppendSnapshotChunk_Request* default_instance_;
};
// -------------------------------------------------------------------

class AppendSnapshotChunk_Response : public ::google::protobuf::Message {
 public:
  AppendSnapshotChunk_Response();
  virtual ~AppendSnapshotChunk_Response();

  AppendSnapshotChunk_Response(const AppendSnapshotChunk_Response& from);

  inline AppendSnapshotChunk_Response& operator=(const AppendSnapshotChunk_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendSnapshotChunk_Response& default_instance();

  void Swap(AppendSnapshotChunk_Response* other);

  // implements Message ----------------------------------------------

  AppendSnapshotChunk_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendSnapshotChunk_Response& from);
  void MergeFrom(const AppendSnapshotChunk_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.AppendSnapshotChunk.Response)
 private:
  inline void set_has_term();
  inline void clear_has_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static AppendSnapshotChunk_Response* default_instance_;
};
// -------------------------------------------------------------------

class AppendSnapshotChunk : public ::google::protobuf::Message {
 public:
  AppendSnapshotChunk();
  virtual ~AppendSnapshotChunk();

  AppendSnapshotChunk(const AppendSnapshotChunk& from);

  inline AppendSnapshotChunk& operator=(const AppendSnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendSnapshotChunk& default_instance();

  void Swap(AppendSnapshotChunk* other);

  // implements Message ----------------------------------------------

  AppendSnapshotChunk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendSnapshotChunk& from);
  void MergeFrom(const AppendSnapshotChunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AppendSnapshotChunk_Request Request;
  typedef AppendSnapshotChunk_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Raft.AppendSnapshotChunk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto();
  friend void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto();

  void InitAsDefaultInstance();
  static AppendSnapshotChunk* default_instance_;
};
// ===================================================================


// ===================================================================

// Error

// -------------------------------------------------------------------

// Server

// required uint64 server_id = 1;
inline bool Server::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Server::server_id() const {
  return server_id_;
}
inline void Server::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string address = 2;
inline bool Server::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Server::address() const {
  return *address_;
}
inline void Server::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Server::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Server::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Server::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Server::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SimpleConfiguration

// repeated .LogCabin.Protocol.Raft.Server servers = 1;
inline int SimpleConfiguration::servers_size() const {
  return servers_.size();
}
inline void SimpleConfiguration::clear_servers() {
  servers_.Clear();
}
inline const ::LogCabin::Protocol::Raft::Server& SimpleConfiguration::servers(int index) const {
  return servers_.Get(index);
}
inline ::LogCabin::Protocol::Raft::Server* SimpleConfiguration::mutable_servers(int index) {
  return servers_.Mutable(index);
}
inline ::LogCabin::Protocol::Raft::Server* SimpleConfiguration::add_servers() {
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Server >&
SimpleConfiguration::servers() const {
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Server >*
SimpleConfiguration::mutable_servers() {
  return &servers_;
}

// -------------------------------------------------------------------

// Configuration

// required .LogCabin.Protocol.Raft.SimpleConfiguration prev_configuration = 1;
inline bool Configuration::has_prev_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration::set_has_prev_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration::clear_has_prev_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration::clear_prev_configuration() {
  if (prev_configuration_ != NULL) prev_configuration_->::LogCabin::Protocol::Raft::SimpleConfiguration::Clear();
  clear_has_prev_configuration();
}
inline const ::LogCabin::Protocol::Raft::SimpleConfiguration& Configuration::prev_configuration() const {
  return prev_configuration_ != NULL ? *prev_configuration_ : *default_instance_->prev_configuration_;
}
inline ::LogCabin::Protocol::Raft::SimpleConfiguration* Configuration::mutable_prev_configuration() {
  set_has_prev_configuration();
  if (prev_configuration_ == NULL) prev_configuration_ = new ::LogCabin::Protocol::Raft::SimpleConfiguration;
  return prev_configuration_;
}
inline ::LogCabin::Protocol::Raft::SimpleConfiguration* Configuration::release_prev_configuration() {
  clear_has_prev_configuration();
  ::LogCabin::Protocol::Raft::SimpleConfiguration* temp = prev_configuration_;
  prev_configuration_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_prev_configuration(::LogCabin::Protocol::Raft::SimpleConfiguration* prev_configuration) {
  delete prev_configuration_;
  prev_configuration_ = prev_configuration;
  if (prev_configuration) {
    set_has_prev_configuration();
  } else {
    clear_has_prev_configuration();
  }
}

// optional .LogCabin.Protocol.Raft.SimpleConfiguration next_configuration = 2;
inline bool Configuration::has_next_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Configuration::set_has_next_configuration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Configuration::clear_has_next_configuration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Configuration::clear_next_configuration() {
  if (next_configuration_ != NULL) next_configuration_->::LogCabin::Protocol::Raft::SimpleConfiguration::Clear();
  clear_has_next_configuration();
}
inline const ::LogCabin::Protocol::Raft::SimpleConfiguration& Configuration::next_configuration() const {
  return next_configuration_ != NULL ? *next_configuration_ : *default_instance_->next_configuration_;
}
inline ::LogCabin::Protocol::Raft::SimpleConfiguration* Configuration::mutable_next_configuration() {
  set_has_next_configuration();
  if (next_configuration_ == NULL) next_configuration_ = new ::LogCabin::Protocol::Raft::SimpleConfiguration;
  return next_configuration_;
}
inline ::LogCabin::Protocol::Raft::SimpleConfiguration* Configuration::release_next_configuration() {
  clear_has_next_configuration();
  ::LogCabin::Protocol::Raft::SimpleConfiguration* temp = next_configuration_;
  next_configuration_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_next_configuration(::LogCabin::Protocol::Raft::SimpleConfiguration* next_configuration) {
  delete next_configuration_;
  next_configuration_ = next_configuration;
  if (next_configuration) {
    set_has_next_configuration();
  } else {
    clear_has_next_configuration();
  }
}

// -------------------------------------------------------------------

// Entry

// required uint64 term = 1;
inline bool Entry::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 Entry::term() const {
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required .LogCabin.Protocol.Raft.EntryType type = 2;
inline bool Entry::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::LogCabin::Protocol::Raft::EntryType Entry::type() const {
  return static_cast< ::LogCabin::Protocol::Raft::EntryType >(type_);
}
inline void Entry::set_type(::LogCabin::Protocol::Raft::EntryType value) {
  assert(::LogCabin::Protocol::Raft::EntryType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .LogCabin.Protocol.Raft.Configuration configuration = 3;
inline bool Entry::has_configuration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entry::set_has_configuration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entry::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entry::clear_configuration() {
  if (configuration_ != NULL) configuration_->::LogCabin::Protocol::Raft::Configuration::Clear();
  clear_has_configuration();
}
inline const ::LogCabin::Protocol::Raft::Configuration& Entry::configuration() const {
  return configuration_ != NULL ? *configuration_ : *default_instance_->configuration_;
}
inline ::LogCabin::Protocol::Raft::Configuration* Entry::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) configuration_ = new ::LogCabin::Protocol::Raft::Configuration;
  return configuration_;
}
inline ::LogCabin::Protocol::Raft::Configuration* Entry::release_configuration() {
  clear_has_configuration();
  ::LogCabin::Protocol::Raft::Configuration* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
inline void Entry::set_allocated_configuration(::LogCabin::Protocol::Raft::Configuration* configuration) {
  delete configuration_;
  configuration_ = configuration;
  if (configuration) {
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
}

// optional bytes data = 4;
inline bool Entry::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entry::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entry::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entry::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Entry::data() const {
  return *data_;
}
inline void Entry::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Entry::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Entry::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Entry::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestVote_Request

// required uint64 server_id = 1;
inline bool RequestVote_Request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVote_Request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVote_Request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVote_Request::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 RequestVote_Request::server_id() const {
  return server_id_;
}
inline void RequestVote_Request::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
}

// required uint64 recipient_id = 5;
inline bool RequestVote_Request::has_recipient_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVote_Request::set_has_recipient_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVote_Request::clear_has_recipient_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVote_Request::clear_recipient_id() {
  recipient_id_ = GOOGLE_ULONGLONG(0);
  clear_has_recipient_id();
}
inline ::google::protobuf::uint64 RequestVote_Request::recipient_id() const {
  return recipient_id_;
}
inline void RequestVote_Request::set_recipient_id(::google::protobuf::uint64 value) {
  set_has_recipient_id();
  recipient_id_ = value;
}

// required uint64 term = 2;
inline bool RequestVote_Request::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVote_Request::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVote_Request::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVote_Request::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RequestVote_Request::term() const {
  return term_;
}
inline void RequestVote_Request::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 last_log_term = 3;
inline bool RequestVote_Request::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVote_Request::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestVote_Request::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestVote_Request::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 RequestVote_Request::last_log_term() const {
  return last_log_term_;
}
inline void RequestVote_Request::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// required uint64 last_log_index = 4;
inline bool RequestVote_Request::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVote_Request::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestVote_Request::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestVote_Request::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 RequestVote_Request::last_log_index() const {
  return last_log_index_;
}
inline void RequestVote_Request::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// -------------------------------------------------------------------

// RequestVote_Response

// required uint64 term = 1;
inline bool RequestVote_Response::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVote_Response::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVote_Response::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVote_Response::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RequestVote_Response::term() const {
  return term_;
}
inline void RequestVote_Response::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required bool granted = 2;
inline bool RequestVote_Response::has_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVote_Response::set_has_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVote_Response::clear_has_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVote_Response::clear_granted() {
  granted_ = false;
  clear_has_granted();
}
inline bool RequestVote_Response::granted() const {
  return granted_;
}
inline void RequestVote_Response::set_granted(bool value) {
  set_has_granted();
  granted_ = value;
}

// -------------------------------------------------------------------

// RequestVote

// -------------------------------------------------------------------

// AppendEntries_Request

// required uint64 server_id = 1;
inline bool AppendEntries_Request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntries_Request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntries_Request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntries_Request::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 AppendEntries_Request::server_id() const {
  return server_id_;
}
inline void AppendEntries_Request::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
}

// required uint64 recipient_id = 7;
inline bool AppendEntries_Request::has_recipient_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntries_Request::set_has_recipient_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntries_Request::clear_has_recipient_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntries_Request::clear_recipient_id() {
  recipient_id_ = GOOGLE_ULONGLONG(0);
  clear_has_recipient_id();
}
inline ::google::protobuf::uint64 AppendEntries_Request::recipient_id() const {
  return recipient_id_;
}
inline void AppendEntries_Request::set_recipient_id(::google::protobuf::uint64 value) {
  set_has_recipient_id();
  recipient_id_ = value;
}

// required uint64 term = 2;
inline bool AppendEntries_Request::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntries_Request::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntries_Request::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntries_Request::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendEntries_Request::term() const {
  return term_;
}
inline void AppendEntries_Request::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 prev_log_index = 3;
inline bool AppendEntries_Request::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntries_Request::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntries_Request::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntries_Request::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::uint64 AppendEntries_Request::prev_log_index() const {
  return prev_log_index_;
}
inline void AppendEntries_Request::set_prev_log_index(::google::protobuf::uint64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
}

// required uint64 prev_log_term = 4;
inline bool AppendEntries_Request::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendEntries_Request::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppendEntries_Request::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppendEntries_Request::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::uint64 AppendEntries_Request::prev_log_term() const {
  return prev_log_term_;
}
inline void AppendEntries_Request::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// repeated .LogCabin.Protocol.Raft.Entry entries = 5;
inline int AppendEntries_Request::entries_size() const {
  return entries_.size();
}
inline void AppendEntries_Request::clear_entries() {
  entries_.Clear();
}
inline const ::LogCabin::Protocol::Raft::Entry& AppendEntries_Request::entries(int index) const {
  return entries_.Get(index);
}
inline ::LogCabin::Protocol::Raft::Entry* AppendEntries_Request::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::LogCabin::Protocol::Raft::Entry* AppendEntries_Request::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Entry >&
AppendEntries_Request::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Raft::Entry >*
AppendEntries_Request::mutable_entries() {
  return &entries_;
}

// required uint64 commit_index = 6;
inline bool AppendEntries_Request::has_commit_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppendEntries_Request::set_has_commit_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppendEntries_Request::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppendEntries_Request::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 AppendEntries_Request::commit_index() const {
  return commit_index_;
}
inline void AppendEntries_Request::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// -------------------------------------------------------------------

// AppendEntries_Response

// required uint64 term = 1;
inline bool AppendEntries_Response::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntries_Response::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntries_Response::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntries_Response::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendEntries_Response::term() const {
  return term_;
}
inline void AppendEntries_Response::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required bool success = 2;
inline bool AppendEntries_Response::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntries_Response::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntries_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntries_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntries_Response::success() const {
  return success_;
}
inline void AppendEntries_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// AppendEntries

// -------------------------------------------------------------------

// AppendSnapshotChunk_Request

// required uint64 server_id = 1;
inline bool AppendSnapshotChunk_Request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendSnapshotChunk_Request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendSnapshotChunk_Request::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 AppendSnapshotChunk_Request::server_id() const {
  return server_id_;
}
inline void AppendSnapshotChunk_Request::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
}

// required uint64 recipient_id = 2;
inline bool AppendSnapshotChunk_Request::has_recipient_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_recipient_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendSnapshotChunk_Request::clear_has_recipient_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendSnapshotChunk_Request::clear_recipient_id() {
  recipient_id_ = GOOGLE_ULONGLONG(0);
  clear_has_recipient_id();
}
inline ::google::protobuf::uint64 AppendSnapshotChunk_Request::recipient_id() const {
  return recipient_id_;
}
inline void AppendSnapshotChunk_Request::set_recipient_id(::google::protobuf::uint64 value) {
  set_has_recipient_id();
  recipient_id_ = value;
}

// required uint64 term = 3;
inline bool AppendSnapshotChunk_Request::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendSnapshotChunk_Request::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendSnapshotChunk_Request::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendSnapshotChunk_Request::term() const {
  return term_;
}
inline void AppendSnapshotChunk_Request::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 last_snapshot_index = 4;
inline bool AppendSnapshotChunk_Request::has_last_snapshot_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_last_snapshot_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendSnapshotChunk_Request::clear_has_last_snapshot_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendSnapshotChunk_Request::clear_last_snapshot_index() {
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_snapshot_index();
}
inline ::google::protobuf::uint64 AppendSnapshotChunk_Request::last_snapshot_index() const {
  return last_snapshot_index_;
}
inline void AppendSnapshotChunk_Request::set_last_snapshot_index(::google::protobuf::uint64 value) {
  set_has_last_snapshot_index();
  last_snapshot_index_ = value;
}

// required uint64 byte_offset = 5;
inline bool AppendSnapshotChunk_Request::has_byte_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_byte_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppendSnapshotChunk_Request::clear_has_byte_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppendSnapshotChunk_Request::clear_byte_offset() {
  byte_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_byte_offset();
}
inline ::google::protobuf::uint64 AppendSnapshotChunk_Request::byte_offset() const {
  return byte_offset_;
}
inline void AppendSnapshotChunk_Request::set_byte_offset(::google::protobuf::uint64 value) {
  set_has_byte_offset();
  byte_offset_ = value;
}

// required bytes data = 6;
inline bool AppendSnapshotChunk_Request::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppendSnapshotChunk_Request::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppendSnapshotChunk_Request::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& AppendSnapshotChunk_Request::data() const {
  return *data_;
}
inline void AppendSnapshotChunk_Request::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void AppendSnapshotChunk_Request::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void AppendSnapshotChunk_Request::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendSnapshotChunk_Request::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* AppendSnapshotChunk_Request::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppendSnapshotChunk_Request::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool done = 7;
inline bool AppendSnapshotChunk_Request::has_done() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppendSnapshotChunk_Request::set_has_done() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppendSnapshotChunk_Request::clear_has_done() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppendSnapshotChunk_Request::clear_done() {
  done_ = false;
  clear_has_done();
}
inline bool AppendSnapshotChunk_Request::done() const {
  return done_;
}
inline void AppendSnapshotChunk_Request::set_done(bool value) {
  set_has_done();
  done_ = value;
}

// -------------------------------------------------------------------

// AppendSnapshotChunk_Response

// required uint64 term = 1;
inline bool AppendSnapshotChunk_Response::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendSnapshotChunk_Response::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendSnapshotChunk_Response::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendSnapshotChunk_Response::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendSnapshotChunk_Response::term() const {
  return term_;
}
inline void AppendSnapshotChunk_Response::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// -------------------------------------------------------------------

// AppendSnapshotChunk


// @@protoc_insertion_point(namespace_scope)

}  // namespace Raft
}  // namespace Protocol
}  // namespace LogCabin

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogCabin::Protocol::Raft::OpCode>() {
  return ::LogCabin::Protocol::Raft::OpCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogCabin::Protocol::Raft::EntryType>() {
  return ::LogCabin::Protocol::Raft::EntryType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_build_2fProtocol_2fRaft_2eproto__INCLUDED
