// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Protocol/Raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "build/Protocol/Raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {
namespace Raft {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVote_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVote_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVote_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVote_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntries_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntries_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntries_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntries_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendSnapshotChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendSnapshotChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendSnapshotChunk_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendSnapshotChunk_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendSnapshotChunk_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendSnapshotChunk_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto() {
  protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "build/Protocol/Raft.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[1] = {
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Server_descriptor_ = file->message_type(1);
  static const int Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, address_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
  SimpleConfiguration_descriptor_ = file->message_type(2);
  static const int SimpleConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleConfiguration, servers_),
  };
  SimpleConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleConfiguration_descriptor_,
      SimpleConfiguration::default_instance_,
      SimpleConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleConfiguration));
  Configuration_descriptor_ = file->message_type(3);
  static const int Configuration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, prev_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, next_configuration_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  Entry_descriptor_ = file->message_type(4);
  static const int Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, data_),
  };
  Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entry));
  RequestVote_descriptor_ = file->message_type(5);
  static const int RequestVote_offsets_[1] = {
  };
  RequestVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVote_descriptor_,
      RequestVote::default_instance_,
      RequestVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVote));
  RequestVote_Request_descriptor_ = RequestVote_descriptor_->nested_type(0);
  static const int RequestVote_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, recipient_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, last_log_index_),
  };
  RequestVote_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVote_Request_descriptor_,
      RequestVote_Request::default_instance_,
      RequestVote_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVote_Request));
  RequestVote_Response_descriptor_ = RequestVote_descriptor_->nested_type(1);
  static const int RequestVote_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Response, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Response, granted_),
  };
  RequestVote_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVote_Response_descriptor_,
      RequestVote_Response::default_instance_,
      RequestVote_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVote_Response));
  AppendEntries_descriptor_ = file->message_type(6);
  static const int AppendEntries_offsets_[1] = {
  };
  AppendEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntries_descriptor_,
      AppendEntries::default_instance_,
      AppendEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntries));
  AppendEntries_Request_descriptor_ = AppendEntries_descriptor_->nested_type(0);
  static const int AppendEntries_Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, recipient_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, prev_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, commit_index_),
  };
  AppendEntries_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntries_Request_descriptor_,
      AppendEntries_Request::default_instance_,
      AppendEntries_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntries_Request));
  AppendEntries_Response_descriptor_ = AppendEntries_descriptor_->nested_type(1);
  static const int AppendEntries_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Response, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Response, success_),
  };
  AppendEntries_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntries_Response_descriptor_,
      AppendEntries_Response::default_instance_,
      AppendEntries_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntries_Response));
  AppendSnapshotChunk_descriptor_ = file->message_type(7);
  static const int AppendSnapshotChunk_offsets_[1] = {
  };
  AppendSnapshotChunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendSnapshotChunk_descriptor_,
      AppendSnapshotChunk::default_instance_,
      AppendSnapshotChunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendSnapshotChunk));
  AppendSnapshotChunk_Request_descriptor_ = AppendSnapshotChunk_descriptor_->nested_type(0);
  static const int AppendSnapshotChunk_Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, recipient_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, last_snapshot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, byte_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, done_),
  };
  AppendSnapshotChunk_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendSnapshotChunk_Request_descriptor_,
      AppendSnapshotChunk_Request::default_instance_,
      AppendSnapshotChunk_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendSnapshotChunk_Request));
  AppendSnapshotChunk_Response_descriptor_ = AppendSnapshotChunk_descriptor_->nested_type(1);
  static const int AppendSnapshotChunk_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Response, term_),
  };
  AppendSnapshotChunk_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendSnapshotChunk_Response_descriptor_,
      AppendSnapshotChunk_Response::default_instance_,
      AppendSnapshotChunk_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendSnapshotChunk_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendSnapshotChunk_Response));
  OpCode_descriptor_ = file->enum_type(0);
  EntryType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_build_2fProtocol_2fRaft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleConfiguration_descriptor_, &SimpleConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVote_descriptor_, &RequestVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVote_Request_descriptor_, &RequestVote_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVote_Response_descriptor_, &RequestVote_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntries_descriptor_, &AppendEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntries_Request_descriptor_, &AppendEntries_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntries_Response_descriptor_, &AppendEntries_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendSnapshotChunk_descriptor_, &AppendSnapshotChunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendSnapshotChunk_Request_descriptor_, &AppendSnapshotChunk_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendSnapshotChunk_Response_descriptor_, &AppendSnapshotChunk_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Server::default_instance_;
  delete Server_reflection_;
  delete SimpleConfiguration::default_instance_;
  delete SimpleConfiguration_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete RequestVote::default_instance_;
  delete RequestVote_reflection_;
  delete RequestVote_Request::default_instance_;
  delete RequestVote_Request_reflection_;
  delete RequestVote_Response::default_instance_;
  delete RequestVote_Response_reflection_;
  delete AppendEntries::default_instance_;
  delete AppendEntries_reflection_;
  delete AppendEntries_Request::default_instance_;
  delete AppendEntries_Request_reflection_;
  delete AppendEntries_Response::default_instance_;
  delete AppendEntries_Response_reflection_;
  delete AppendSnapshotChunk::default_instance_;
  delete AppendSnapshotChunk_reflection_;
  delete AppendSnapshotChunk_Request::default_instance_;
  delete AppendSnapshotChunk_Request_reflection_;
  delete AppendSnapshotChunk_Response::default_instance_;
  delete AppendSnapshotChunk_Response_reflection_;
}

void protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031build/Protocol/Raft.proto\022\026LogCabin.Pr"
    "otocol.Raft\"\007\n\005Error\",\n\006Server\022\021\n\tserver"
    "_id\030\001 \002(\004\022\017\n\007address\030\002 \002(\t\"F\n\023SimpleConf"
    "iguration\022/\n\007servers\030\001 \003(\0132\036.LogCabin.Pr"
    "otocol.Raft.Server\"\241\001\n\rConfiguration\022G\n\022"
    "prev_configuration\030\001 \002(\0132+.LogCabin.Prot"
    "ocol.Raft.SimpleConfiguration\022G\n\022next_co"
    "nfiguration\030\002 \001(\0132+.LogCabin.Protocol.Ra"
    "ft.SimpleConfiguration\"\222\001\n\005Entry\022\014\n\004term"
    "\030\001 \002(\004\022/\n\004type\030\002 \002(\0162!.LogCabin.Protocol"
    ".Raft.EntryType\022<\n\rconfiguration\030\003 \001(\0132%"
    ".LogCabin.Protocol.Raft.Configuration\022\014\n"
    "\004data\030\004 \001(\014\"\251\001\n\013RequestVote\032o\n\007Request\022\021"
    "\n\tserver_id\030\001 \002(\004\022\024\n\014recipient_id\030\005 \002(\004\022"
    "\014\n\004term\030\002 \002(\004\022\025\n\rlast_log_term\030\003 \002(\004\022\026\n\016"
    "last_log_index\030\004 \002(\004\032)\n\010Response\022\014\n\004term"
    "\030\001 \002(\004\022\017\n\007granted\030\002 \002(\010\"\362\001\n\rAppendEntrie"
    "s\032\265\001\n\007Request\022\021\n\tserver_id\030\001 \002(\004\022\024\n\014reci"
    "pient_id\030\007 \002(\004\022\014\n\004term\030\002 \002(\004\022\026\n\016prev_log"
    "_index\030\003 \002(\004\022\025\n\rprev_log_term\030\004 \002(\004\022.\n\007e"
    "ntries\030\005 \003(\0132\035.LogCabin.Protocol.Raft.En"
    "try\022\024\n\014commit_index\030\006 \002(\004\032)\n\010Response\022\014\n"
    "\004term\030\001 \002(\004\022\017\n\007success\030\002 \002(\010\"\300\001\n\023AppendS"
    "napshotChunk\032\216\001\n\007Request\022\021\n\tserver_id\030\001 "
    "\002(\004\022\024\n\014recipient_id\030\002 \002(\004\022\014\n\004term\030\003 \002(\004\022"
    "\033\n\023last_snapshot_index\030\004 \002(\004\022\023\n\013byte_off"
    "set\030\005 \002(\004\022\014\n\004data\030\006 \002(\014\022\014\n\004done\030\007 \002(\010\032\030\n"
    "\010Response\022\014\n\004term\030\001 \002(\004*i\n\006OpCode\022\036\n\032GET"
    "_SUPPORTED_RPC_VERSIONS\020\000\022\020\n\014REQUEST_VOT"
    "E\020\001\022\022\n\016APPEND_ENTRIES\020\002\022\031\n\025APPEND_SNAPSH"
    "OT_CHUNK\020\003*2\n\tEntryType\022\021\n\rCONFIGURATION"
    "\020\001\022\010\n\004DATA\020\002\022\010\n\004NOOP\020\003", 1262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "build/Protocol/Raft.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  Server::default_instance_ = new Server();
  SimpleConfiguration::default_instance_ = new SimpleConfiguration();
  Configuration::default_instance_ = new Configuration();
  Entry::default_instance_ = new Entry();
  RequestVote::default_instance_ = new RequestVote();
  RequestVote_Request::default_instance_ = new RequestVote_Request();
  RequestVote_Response::default_instance_ = new RequestVote_Response();
  AppendEntries::default_instance_ = new AppendEntries();
  AppendEntries_Request::default_instance_ = new AppendEntries_Request();
  AppendEntries_Response::default_instance_ = new AppendEntries_Response();
  AppendSnapshotChunk::default_instance_ = new AppendSnapshotChunk();
  AppendSnapshotChunk_Request::default_instance_ = new AppendSnapshotChunk_Request();
  AppendSnapshotChunk_Response::default_instance_ = new AppendSnapshotChunk_Response();
  Error::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  SimpleConfiguration::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  Entry::default_instance_->InitAsDefaultInstance();
  RequestVote::default_instance_->InitAsDefaultInstance();
  RequestVote_Request::default_instance_->InitAsDefaultInstance();
  RequestVote_Response::default_instance_->InitAsDefaultInstance();
  AppendEntries::default_instance_->InitAsDefaultInstance();
  AppendEntries_Request::default_instance_->InitAsDefaultInstance();
  AppendEntries_Response::default_instance_->InitAsDefaultInstance();
  AppendSnapshotChunk::default_instance_->InitAsDefaultInstance();
  AppendSnapshotChunk_Request::default_instance_->InitAsDefaultInstance();
  AppendSnapshotChunk_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_build_2fProtocol_2fRaft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_build_2fProtocol_2fRaft_2eproto {
  StaticDescriptorInitializer_build_2fProtocol_2fRaft_2eproto() {
    protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  }
} static_descriptor_initializer_build_2fProtocol_2fRaft_2eproto_;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCode_descriptor_;
}
bool OpCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryType_descriptor_;
}
bool EntryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server::kServerIdFieldNumber;
const int Server::kAddressFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleConfiguration::kServersFieldNumber;
#endif  // !_MSC_VER

SimpleConfiguration::SimpleConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleConfiguration::InitAsDefaultInstance() {
}

SimpleConfiguration::SimpleConfiguration(const SimpleConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleConfiguration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleConfiguration::~SimpleConfiguration() {
  SharedDtor();
}

void SimpleConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleConfiguration_descriptor_;
}

const SimpleConfiguration& SimpleConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

SimpleConfiguration* SimpleConfiguration::default_instance_ = NULL;

SimpleConfiguration* SimpleConfiguration::New() const {
  return new SimpleConfiguration;
}

void SimpleConfiguration::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LogCabin.Protocol.Raft.Server servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LogCabin.Protocol.Raft.Server servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .LogCabin.Protocol.Raft.Server servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleConfiguration::ByteSize() const {
  int total_size = 0;

  // repeated .LogCabin.Protocol.Raft.Server servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleConfiguration::MergeFrom(const SimpleConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleConfiguration::CopyFrom(const SimpleConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleConfiguration::IsInitialized() const {

  for (int i = 0; i < servers_size(); i++) {
    if (!this->servers(i).IsInitialized()) return false;
  }
  return true;
}

void SimpleConfiguration::Swap(SimpleConfiguration* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleConfiguration_descriptor_;
  metadata.reflection = SimpleConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kPrevConfigurationFieldNumber;
const int Configuration::kNextConfigurationFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
  prev_configuration_ = const_cast< ::LogCabin::Protocol::Raft::SimpleConfiguration*>(&::LogCabin::Protocol::Raft::SimpleConfiguration::default_instance());
  next_configuration_ = const_cast< ::LogCabin::Protocol::Raft::SimpleConfiguration*>(&::LogCabin::Protocol::Raft::SimpleConfiguration::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  prev_configuration_ = NULL;
  next_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
    delete prev_configuration_;
    delete next_configuration_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prev_configuration()) {
      if (prev_configuration_ != NULL) prev_configuration_->::LogCabin::Protocol::Raft::SimpleConfiguration::Clear();
    }
    if (has_next_configuration()) {
      if (next_configuration_ != NULL) next_configuration_->::LogCabin::Protocol::Raft::SimpleConfiguration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogCabin.Protocol.Raft.SimpleConfiguration prev_configuration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_next_configuration;
        break;
      }

      // optional .LogCabin.Protocol.Raft.SimpleConfiguration next_configuration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LogCabin.Protocol.Raft.SimpleConfiguration prev_configuration = 1;
  if (has_prev_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prev_configuration(), output);
  }

  // optional .LogCabin.Protocol.Raft.SimpleConfiguration next_configuration = 2;
  if (has_next_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->next_configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LogCabin.Protocol.Raft.SimpleConfiguration prev_configuration = 1;
  if (has_prev_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prev_configuration(), target);
  }

  // optional .LogCabin.Protocol.Raft.SimpleConfiguration next_configuration = 2;
  if (has_next_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->next_configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Raft.SimpleConfiguration prev_configuration = 1;
    if (has_prev_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_configuration());
    }

    // optional .LogCabin.Protocol.Raft.SimpleConfiguration next_configuration = 2;
    if (has_next_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prev_configuration()) {
      mutable_prev_configuration()->::LogCabin::Protocol::Raft::SimpleConfiguration::MergeFrom(from.prev_configuration());
    }
    if (from.has_next_configuration()) {
      mutable_next_configuration()->::LogCabin::Protocol::Raft::SimpleConfiguration::MergeFrom(from.next_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_prev_configuration()) {
    if (!this->prev_configuration().IsInitialized()) return false;
  }
  if (has_next_configuration()) {
    if (!this->next_configuration().IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(prev_configuration_, other->prev_configuration_);
    std::swap(next_configuration_, other->next_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entry::kTermFieldNumber;
const int Entry::kTypeFieldNumber;
const int Entry::kConfigurationFieldNumber;
const int Entry::kDataFieldNumber;
#endif  // !_MSC_VER

Entry::Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entry::InitAsDefaultInstance() {
  configuration_ = const_cast< ::LogCabin::Protocol::Raft::Configuration*>(&::LogCabin::Protocol::Raft::Configuration::default_instance());
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  configuration_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() {
  SharedDtor();
}

void Entry::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete configuration_;
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New() const {
  return new Entry;
}

void Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::LogCabin::Protocol::Raft::Configuration::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .LogCabin.Protocol.Raft.EntryType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Raft::EntryType_IsValid(value)) {
            set_type(static_cast< ::LogCabin::Protocol::Raft::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configuration;
        break;
      }

      // optional .LogCabin.Protocol.Raft.Configuration configuration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required .LogCabin.Protocol.Raft.EntryType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .LogCabin.Protocol.Raft.Configuration configuration = 3;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configuration(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required .LogCabin.Protocol.Raft.EntryType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .LogCabin.Protocol.Raft.Configuration configuration = 3;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configuration(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required .LogCabin.Protocol.Raft.EntryType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .LogCabin.Protocol.Raft.Configuration configuration = 3;
    if (has_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::LogCabin::Protocol::Raft::Configuration::MergeFrom(from.configuration());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  return true;
}

void Entry::Swap(Entry* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(type_, other->type_);
    std::swap(configuration_, other->configuration_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVote_Request::kServerIdFieldNumber;
const int RequestVote_Request::kRecipientIdFieldNumber;
const int RequestVote_Request::kTermFieldNumber;
const int RequestVote_Request::kLastLogTermFieldNumber;
const int RequestVote_Request::kLastLogIndexFieldNumber;
#endif  // !_MSC_VER

RequestVote_Request::RequestVote_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestVote_Request::InitAsDefaultInstance() {
}

RequestVote_Request::RequestVote_Request(const RequestVote_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestVote_Request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  recipient_id_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  last_log_term_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVote_Request::~RequestVote_Request() {
  SharedDtor();
}

void RequestVote_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVote_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVote_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVote_Request_descriptor_;
}

const RequestVote_Request& RequestVote_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

RequestVote_Request* RequestVote_Request::default_instance_ = NULL;

RequestVote_Request* RequestVote_Request::New() const {
  return new RequestVote_Request;
}

void RequestVote_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = GOOGLE_ULONGLONG(0);
    recipient_id_ = GOOGLE_ULONGLONG(0);
    term_ = GOOGLE_ULONGLONG(0);
    last_log_term_ = GOOGLE_ULONGLONG(0);
    last_log_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVote_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_log_term;
        break;
      }

      // required uint64 last_log_term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_log_index;
        break;
      }

      // required uint64 last_log_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recipient_id;
        break;
      }

      // required uint64 recipient_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recipient_id_)));
          set_has_recipient_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestVote_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // required uint64 last_log_term = 3;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_term(), output);
  }

  // required uint64 last_log_index = 4;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_index(), output);
  }

  // required uint64 recipient_id = 5;
  if (has_recipient_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->recipient_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestVote_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // required uint64 last_log_term = 3;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_term(), target);
  }

  // required uint64 last_log_index = 4;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_index(), target);
  }

  // required uint64 recipient_id = 5;
  if (has_recipient_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->recipient_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestVote_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required uint64 recipient_id = 5;
    if (has_recipient_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recipient_id());
    }

    // required uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 last_log_term = 3;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

    // required uint64 last_log_index = 4;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVote_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVote_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVote_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVote_Request::MergeFrom(const RequestVote_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_recipient_id()) {
      set_recipient_id(from.recipient_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVote_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVote_Request::CopyFrom(const RequestVote_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestVote_Request::Swap(RequestVote_Request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(recipient_id_, other->recipient_id_);
    std::swap(term_, other->term_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVote_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVote_Request_descriptor_;
  metadata.reflection = RequestVote_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestVote_Response::kTermFieldNumber;
const int RequestVote_Response::kGrantedFieldNumber;
#endif  // !_MSC_VER

RequestVote_Response::RequestVote_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestVote_Response::InitAsDefaultInstance() {
}

RequestVote_Response::RequestVote_Response(const RequestVote_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestVote_Response::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  granted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVote_Response::~RequestVote_Response() {
  SharedDtor();
}

void RequestVote_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVote_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVote_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVote_Response_descriptor_;
}

const RequestVote_Response& RequestVote_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

RequestVote_Response* RequestVote_Response::default_instance_ = NULL;

RequestVote_Response* RequestVote_Response::New() const {
  return new RequestVote_Response;
}

void RequestVote_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    granted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVote_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_granted;
        break;
      }

      // required bool granted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &granted_)));
          set_has_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestVote_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool granted = 2;
  if (has_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestVote_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool granted = 2;
  if (has_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestVote_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool granted = 2;
    if (has_granted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVote_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVote_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVote_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVote_Response::MergeFrom(const RequestVote_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_granted()) {
      set_granted(from.granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVote_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVote_Response::CopyFrom(const RequestVote_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestVote_Response::Swap(RequestVote_Response* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(granted_, other->granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVote_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVote_Response_descriptor_;
  metadata.reflection = RequestVote_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestVote::RequestVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestVote::InitAsDefaultInstance() {
}

RequestVote::RequestVote(const RequestVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestVote::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVote::~RequestVote() {
  SharedDtor();
}

void RequestVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVote_descriptor_;
}

const RequestVote& RequestVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

RequestVote* RequestVote::default_instance_ = NULL;

RequestVote* RequestVote::New() const {
  return new RequestVote;
}

void RequestVote::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestVote::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVote::MergeFrom(const RequestVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVote::CopyFrom(const RequestVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote::IsInitialized() const {

  return true;
}

void RequestVote::Swap(RequestVote* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVote_descriptor_;
  metadata.reflection = RequestVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntries_Request::kServerIdFieldNumber;
const int AppendEntries_Request::kRecipientIdFieldNumber;
const int AppendEntries_Request::kTermFieldNumber;
const int AppendEntries_Request::kPrevLogIndexFieldNumber;
const int AppendEntries_Request::kPrevLogTermFieldNumber;
const int AppendEntries_Request::kEntriesFieldNumber;
const int AppendEntries_Request::kCommitIndexFieldNumber;
#endif  // !_MSC_VER

AppendEntries_Request::AppendEntries_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendEntries_Request::InitAsDefaultInstance() {
}

AppendEntries_Request::AppendEntries_Request(const AppendEntries_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendEntries_Request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  recipient_id_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  commit_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntries_Request::~AppendEntries_Request() {
  SharedDtor();
}

void AppendEntries_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntries_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntries_Request_descriptor_;
}

const AppendEntries_Request& AppendEntries_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

AppendEntries_Request* AppendEntries_Request::default_instance_ = NULL;

AppendEntries_Request* AppendEntries_Request::New() const {
  return new AppendEntries_Request;
}

void AppendEntries_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = GOOGLE_ULONGLONG(0);
    recipient_id_ = GOOGLE_ULONGLONG(0);
    term_ = GOOGLE_ULONGLONG(0);
    prev_log_index_ = GOOGLE_ULONGLONG(0);
    prev_log_term_ = GOOGLE_ULONGLONG(0);
    commit_index_ = GOOGLE_ULONGLONG(0);
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prev_log_index;
        break;
      }

      // required uint64 prev_log_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
          set_has_prev_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_term;
        break;
      }

      // required uint64 prev_log_term = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        break;
      }

      // repeated .LogCabin.Protocol.Raft.Entry entries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        if (input->ExpectTag(48)) goto parse_commit_index;
        break;
      }

      // required uint64 commit_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recipient_id;
        break;
      }

      // required uint64 recipient_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recipient_id_)));
          set_has_recipient_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // required uint64 prev_log_index = 3;
  if (has_prev_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prev_log_index(), output);
  }

  // required uint64 prev_log_term = 4;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_term(), output);
  }

  // repeated .LogCabin.Protocol.Raft.Entry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries(i), output);
  }

  // required uint64 commit_index = 6;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commit_index(), output);
  }

  // required uint64 recipient_id = 7;
  if (has_recipient_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->recipient_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendEntries_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // required uint64 prev_log_index = 3;
  if (has_prev_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prev_log_index(), target);
  }

  // required uint64 prev_log_term = 4;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_term(), target);
  }

  // repeated .LogCabin.Protocol.Raft.Entry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries(i), target);
  }

  // required uint64 commit_index = 6;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commit_index(), target);
  }

  // required uint64 recipient_id = 7;
  if (has_recipient_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->recipient_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendEntries_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required uint64 recipient_id = 7;
    if (has_recipient_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recipient_id());
    }

    // required uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 prev_log_index = 3;
    if (has_prev_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_index());
    }

    // required uint64 prev_log_term = 4;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_term());
    }

    // required uint64 commit_index = 6;
    if (has_commit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_index());
    }

  }
  // repeated .LogCabin.Protocol.Raft.Entry entries = 5;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntries_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntries_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntries_Request::MergeFrom(const AppendEntries_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_recipient_id()) {
      set_recipient_id(from.recipient_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_prev_log_index()) {
      set_prev_log_index(from.prev_log_index());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntries_Request::CopyFrom(const AppendEntries_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntries_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void AppendEntries_Request::Swap(AppendEntries_Request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(recipient_id_, other->recipient_id_);
    std::swap(term_, other->term_);
    std::swap(prev_log_index_, other->prev_log_index_);
    std::swap(prev_log_term_, other->prev_log_term_);
    entries_.Swap(&other->entries_);
    std::swap(commit_index_, other->commit_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntries_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntries_Request_descriptor_;
  metadata.reflection = AppendEntries_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppendEntries_Response::kTermFieldNumber;
const int AppendEntries_Response::kSuccessFieldNumber;
#endif  // !_MSC_VER

AppendEntries_Response::AppendEntries_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendEntries_Response::InitAsDefaultInstance() {
}

AppendEntries_Response::AppendEntries_Response(const AppendEntries_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendEntries_Response::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntries_Response::~AppendEntries_Response() {
  SharedDtor();
}

void AppendEntries_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntries_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntries_Response_descriptor_;
}

const AppendEntries_Response& AppendEntries_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

AppendEntries_Response* AppendEntries_Response::default_instance_ = NULL;

AppendEntries_Response* AppendEntries_Response::New() const {
  return new AppendEntries_Response;
}

void AppendEntries_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendEntries_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendEntries_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntries_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntries_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntries_Response::MergeFrom(const AppendEntries_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntries_Response::CopyFrom(const AppendEntries_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntries_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppendEntries_Response::Swap(AppendEntries_Response* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntries_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntries_Response_descriptor_;
  metadata.reflection = AppendEntries_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

AppendEntries::AppendEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendEntries::InitAsDefaultInstance() {
}

AppendEntries::AppendEntries(const AppendEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendEntries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntries::~AppendEntries() {
  SharedDtor();
}

void AppendEntries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntries_descriptor_;
}

const AppendEntries& AppendEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

AppendEntries* AppendEntries::default_instance_ = NULL;

AppendEntries* AppendEntries::New() const {
  return new AppendEntries;
}

void AppendEntries::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AppendEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendEntries::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntries::MergeFrom(const AppendEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntries::CopyFrom(const AppendEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntries::IsInitialized() const {

  return true;
}

void AppendEntries::Swap(AppendEntries* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntries_descriptor_;
  metadata.reflection = AppendEntries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendSnapshotChunk_Request::kServerIdFieldNumber;
const int AppendSnapshotChunk_Request::kRecipientIdFieldNumber;
const int AppendSnapshotChunk_Request::kTermFieldNumber;
const int AppendSnapshotChunk_Request::kLastSnapshotIndexFieldNumber;
const int AppendSnapshotChunk_Request::kByteOffsetFieldNumber;
const int AppendSnapshotChunk_Request::kDataFieldNumber;
const int AppendSnapshotChunk_Request::kDoneFieldNumber;
#endif  // !_MSC_VER

AppendSnapshotChunk_Request::AppendSnapshotChunk_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendSnapshotChunk_Request::InitAsDefaultInstance() {
}

AppendSnapshotChunk_Request::AppendSnapshotChunk_Request(const AppendSnapshotChunk_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendSnapshotChunk_Request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  recipient_id_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
  byte_offset_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendSnapshotChunk_Request::~AppendSnapshotChunk_Request() {
  SharedDtor();
}

void AppendSnapshotChunk_Request::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AppendSnapshotChunk_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendSnapshotChunk_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendSnapshotChunk_Request_descriptor_;
}

const AppendSnapshotChunk_Request& AppendSnapshotChunk_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

AppendSnapshotChunk_Request* AppendSnapshotChunk_Request::default_instance_ = NULL;

AppendSnapshotChunk_Request* AppendSnapshotChunk_Request::New() const {
  return new AppendSnapshotChunk_Request;
}

void AppendSnapshotChunk_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = GOOGLE_ULONGLONG(0);
    recipient_id_ = GOOGLE_ULONGLONG(0);
    term_ = GOOGLE_ULONGLONG(0);
    last_snapshot_index_ = GOOGLE_ULONGLONG(0);
    byte_offset_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    done_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendSnapshotChunk_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recipient_id;
        break;
      }

      // required uint64 recipient_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recipient_id_)));
          set_has_recipient_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // required uint64 term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_snapshot_index;
        break;
      }

      // required uint64 last_snapshot_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_snapshot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_index_)));
          set_has_last_snapshot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_byte_offset;
        break;
      }

      // required uint64 byte_offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byte_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &byte_offset_)));
          set_has_byte_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // required bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_done;
        break;
      }

      // required bool done = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendSnapshotChunk_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required uint64 recipient_id = 2;
  if (has_recipient_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recipient_id(), output);
  }

  // required uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // required uint64 last_snapshot_index = 4;
  if (has_last_snapshot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_snapshot_index(), output);
  }

  // required uint64 byte_offset = 5;
  if (has_byte_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->byte_offset(), output);
  }

  // required bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  // required bool done = 7;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendSnapshotChunk_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required uint64 recipient_id = 2;
  if (has_recipient_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recipient_id(), target);
  }

  // required uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // required uint64 last_snapshot_index = 4;
  if (has_last_snapshot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_snapshot_index(), target);
  }

  // required uint64 byte_offset = 5;
  if (has_byte_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->byte_offset(), target);
  }

  // required bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // required bool done = 7;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendSnapshotChunk_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required uint64 recipient_id = 2;
    if (has_recipient_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recipient_id());
    }

    // required uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 last_snapshot_index = 4;
    if (has_last_snapshot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_index());
    }

    // required uint64 byte_offset = 5;
    if (has_byte_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->byte_offset());
    }

    // required bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bool done = 7;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendSnapshotChunk_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendSnapshotChunk_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendSnapshotChunk_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendSnapshotChunk_Request::MergeFrom(const AppendSnapshotChunk_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_recipient_id()) {
      set_recipient_id(from.recipient_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_last_snapshot_index()) {
      set_last_snapshot_index(from.last_snapshot_index());
    }
    if (from.has_byte_offset()) {
      set_byte_offset(from.byte_offset());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendSnapshotChunk_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendSnapshotChunk_Request::CopyFrom(const AppendSnapshotChunk_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendSnapshotChunk_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AppendSnapshotChunk_Request::Swap(AppendSnapshotChunk_Request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(recipient_id_, other->recipient_id_);
    std::swap(term_, other->term_);
    std::swap(last_snapshot_index_, other->last_snapshot_index_);
    std::swap(byte_offset_, other->byte_offset_);
    std::swap(data_, other->data_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendSnapshotChunk_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendSnapshotChunk_Request_descriptor_;
  metadata.reflection = AppendSnapshotChunk_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppendSnapshotChunk_Response::kTermFieldNumber;
#endif  // !_MSC_VER

AppendSnapshotChunk_Response::AppendSnapshotChunk_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendSnapshotChunk_Response::InitAsDefaultInstance() {
}

AppendSnapshotChunk_Response::AppendSnapshotChunk_Response(const AppendSnapshotChunk_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendSnapshotChunk_Response::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendSnapshotChunk_Response::~AppendSnapshotChunk_Response() {
  SharedDtor();
}

void AppendSnapshotChunk_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendSnapshotChunk_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendSnapshotChunk_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendSnapshotChunk_Response_descriptor_;
}

const AppendSnapshotChunk_Response& AppendSnapshotChunk_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

AppendSnapshotChunk_Response* AppendSnapshotChunk_Response::default_instance_ = NULL;

AppendSnapshotChunk_Response* AppendSnapshotChunk_Response::New() const {
  return new AppendSnapshotChunk_Response;
}

void AppendSnapshotChunk_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendSnapshotChunk_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendSnapshotChunk_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendSnapshotChunk_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendSnapshotChunk_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendSnapshotChunk_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendSnapshotChunk_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendSnapshotChunk_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendSnapshotChunk_Response::MergeFrom(const AppendSnapshotChunk_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendSnapshotChunk_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendSnapshotChunk_Response::CopyFrom(const AppendSnapshotChunk_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendSnapshotChunk_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppendSnapshotChunk_Response::Swap(AppendSnapshotChunk_Response* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendSnapshotChunk_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendSnapshotChunk_Response_descriptor_;
  metadata.reflection = AppendSnapshotChunk_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

AppendSnapshotChunk::AppendSnapshotChunk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendSnapshotChunk::InitAsDefaultInstance() {
}

AppendSnapshotChunk::AppendSnapshotChunk(const AppendSnapshotChunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendSnapshotChunk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendSnapshotChunk::~AppendSnapshotChunk() {
  SharedDtor();
}

void AppendSnapshotChunk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendSnapshotChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendSnapshotChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendSnapshotChunk_descriptor_;
}

const AppendSnapshotChunk& AppendSnapshotChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fRaft_2eproto();
  return *default_instance_;
}

AppendSnapshotChunk* AppendSnapshotChunk::default_instance_ = NULL;

AppendSnapshotChunk* AppendSnapshotChunk::New() const {
  return new AppendSnapshotChunk;
}

void AppendSnapshotChunk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendSnapshotChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AppendSnapshotChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendSnapshotChunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendSnapshotChunk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendSnapshotChunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendSnapshotChunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendSnapshotChunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendSnapshotChunk::MergeFrom(const AppendSnapshotChunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendSnapshotChunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendSnapshotChunk::CopyFrom(const AppendSnapshotChunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendSnapshotChunk::IsInitialized() const {

  return true;
}

void AppendSnapshotChunk::Swap(AppendSnapshotChunk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendSnapshotChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendSnapshotChunk_descriptor_;
  metadata.reflection = AppendSnapshotChunk_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Raft
}  // namespace Protocol
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
