// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/Protocol/Client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "build/Protocol/Client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {
namespace Client {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExactlyOnceRPCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExactlyOnceRPCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSupportedRPCVersions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSupportedRPCVersions_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSupportedRPCVersions_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSupportedRPCVersions_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSupportedRPCVersions_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSupportedRPCVersions_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSession_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSession_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSession_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSession_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfiguration_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfiguration_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfiguration_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfiguration_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_OK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_OK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_ConfigurationChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationBad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_ConfigurationBad_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_ListDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Request_ListDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_Read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Request_Read_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_ListDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Response_ListDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_Read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Response_Read_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_MakeDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_MakeDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_RemoveDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_Write_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_Write_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_RemoveFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_build_2fProtocol_2fClient_2eproto() {
  protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "build/Protocol/Client.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, leader_hint_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_Code_descriptor_ = Error_descriptor_->enum_type(0);
  ExactlyOnceRPCInfo_descriptor_ = file->message_type(1);
  static const int ExactlyOnceRPCInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, first_outstanding_rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, rpc_number_),
  };
  ExactlyOnceRPCInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExactlyOnceRPCInfo_descriptor_,
      ExactlyOnceRPCInfo::default_instance_,
      ExactlyOnceRPCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExactlyOnceRPCInfo));
  GetSupportedRPCVersions_descriptor_ = file->message_type(2);
  static const int GetSupportedRPCVersions_offsets_[1] = {
  };
  GetSupportedRPCVersions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSupportedRPCVersions_descriptor_,
      GetSupportedRPCVersions::default_instance_,
      GetSupportedRPCVersions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSupportedRPCVersions));
  GetSupportedRPCVersions_Request_descriptor_ = GetSupportedRPCVersions_descriptor_->nested_type(0);
  static const int GetSupportedRPCVersions_Request_offsets_[1] = {
  };
  GetSupportedRPCVersions_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSupportedRPCVersions_Request_descriptor_,
      GetSupportedRPCVersions_Request::default_instance_,
      GetSupportedRPCVersions_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSupportedRPCVersions_Request));
  GetSupportedRPCVersions_Response_descriptor_ = GetSupportedRPCVersions_descriptor_->nested_type(1);
  static const int GetSupportedRPCVersions_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions_Response, min_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions_Response, max_version_),
  };
  GetSupportedRPCVersions_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSupportedRPCVersions_Response_descriptor_,
      GetSupportedRPCVersions_Response::default_instance_,
      GetSupportedRPCVersions_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSupportedRPCVersions_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSupportedRPCVersions_Response));
  OpenSession_descriptor_ = file->message_type(3);
  static const int OpenSession_offsets_[1] = {
  };
  OpenSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSession_descriptor_,
      OpenSession::default_instance_,
      OpenSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSession));
  OpenSession_Request_descriptor_ = OpenSession_descriptor_->nested_type(0);
  static const int OpenSession_Request_offsets_[1] = {
  };
  OpenSession_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSession_Request_descriptor_,
      OpenSession_Request::default_instance_,
      OpenSession_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSession_Request));
  OpenSession_Response_descriptor_ = OpenSession_descriptor_->nested_type(1);
  static const int OpenSession_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Response, client_id_),
  };
  OpenSession_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSession_Response_descriptor_,
      OpenSession_Response::default_instance_,
      OpenSession_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSession_Response));
  Server_descriptor_ = file->message_type(4);
  static const int Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, address_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
  GetConfiguration_descriptor_ = file->message_type(5);
  static const int GetConfiguration_offsets_[1] = {
  };
  GetConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfiguration_descriptor_,
      GetConfiguration::default_instance_,
      GetConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfiguration));
  GetConfiguration_Request_descriptor_ = GetConfiguration_descriptor_->nested_type(0);
  static const int GetConfiguration_Request_offsets_[1] = {
  };
  GetConfiguration_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfiguration_Request_descriptor_,
      GetConfiguration_Request::default_instance_,
      GetConfiguration_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfiguration_Request));
  GetConfiguration_Response_descriptor_ = GetConfiguration_descriptor_->nested_type(1);
  static const int GetConfiguration_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, servers_),
  };
  GetConfiguration_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfiguration_Response_descriptor_,
      GetConfiguration_Response::default_instance_,
      GetConfiguration_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfiguration_Response));
  SetConfiguration_descriptor_ = file->message_type(6);
  static const int SetConfiguration_offsets_[1] = {
  };
  SetConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_descriptor_,
      SetConfiguration::default_instance_,
      SetConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration));
  SetConfiguration_Request_descriptor_ = SetConfiguration_descriptor_->nested_type(0);
  static const int SetConfiguration_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, old_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, new_servers_),
  };
  SetConfiguration_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Request_descriptor_,
      SetConfiguration_Request::default_instance_,
      SetConfiguration_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Request));
  SetConfiguration_Response_descriptor_ = SetConfiguration_descriptor_->nested_type(1);
  static const int SetConfiguration_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, configuration_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, configuration_bad_),
  };
  SetConfiguration_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_descriptor_,
      SetConfiguration_Response::default_instance_,
      SetConfiguration_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response));
  SetConfiguration_Response_OK_descriptor_ = SetConfiguration_Response_descriptor_->nested_type(0);
  static const int SetConfiguration_Response_OK_offsets_[1] = {
  };
  SetConfiguration_Response_OK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_OK_descriptor_,
      SetConfiguration_Response_OK::default_instance_,
      SetConfiguration_Response_OK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_OK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_OK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response_OK));
  SetConfiguration_Response_ConfigurationChanged_descriptor_ = SetConfiguration_Response_descriptor_->nested_type(1);
  static const int SetConfiguration_Response_ConfigurationChanged_offsets_[1] = {
  };
  SetConfiguration_Response_ConfigurationChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_ConfigurationChanged_descriptor_,
      SetConfiguration_Response_ConfigurationChanged::default_instance_,
      SetConfiguration_Response_ConfigurationChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response_ConfigurationChanged));
  SetConfiguration_Response_ConfigurationBad_descriptor_ = SetConfiguration_Response_descriptor_->nested_type(2);
  static const int SetConfiguration_Response_ConfigurationBad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationBad, bad_servers_),
  };
  SetConfiguration_Response_ConfigurationBad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_ConfigurationBad_descriptor_,
      SetConfiguration_Response_ConfigurationBad::default_instance_,
      SetConfiguration_Response_ConfigurationBad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationBad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationBad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response_ConfigurationBad));
  TreeCondition_descriptor_ = file->message_type(7);
  static const int TreeCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, contents_),
  };
  TreeCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeCondition_descriptor_,
      TreeCondition::default_instance_,
      TreeCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeCondition));
  ReadOnlyTree_descriptor_ = file->message_type(8);
  static const int ReadOnlyTree_offsets_[1] = {
  };
  ReadOnlyTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_descriptor_,
      ReadOnlyTree::default_instance_,
      ReadOnlyTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree));
  ReadOnlyTree_Request_descriptor_ = ReadOnlyTree_descriptor_->nested_type(0);
  static const int ReadOnlyTree_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, list_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, read_),
  };
  ReadOnlyTree_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Request_descriptor_,
      ReadOnlyTree_Request::default_instance_,
      ReadOnlyTree_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Request));
  ReadOnlyTree_Request_ListDirectory_descriptor_ = ReadOnlyTree_Request_descriptor_->nested_type(0);
  static const int ReadOnlyTree_Request_ListDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_ListDirectory, path_),
  };
  ReadOnlyTree_Request_ListDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Request_ListDirectory_descriptor_,
      ReadOnlyTree_Request_ListDirectory::default_instance_,
      ReadOnlyTree_Request_ListDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_ListDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_ListDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Request_ListDirectory));
  ReadOnlyTree_Request_Read_descriptor_ = ReadOnlyTree_Request_descriptor_->nested_type(1);
  static const int ReadOnlyTree_Request_Read_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_Read, path_),
  };
  ReadOnlyTree_Request_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Request_Read_descriptor_,
      ReadOnlyTree_Request_Read::default_instance_,
      ReadOnlyTree_Request_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Request_Read));
  ReadOnlyTree_Response_descriptor_ = ReadOnlyTree_descriptor_->nested_type(1);
  static const int ReadOnlyTree_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, list_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, read_),
  };
  ReadOnlyTree_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Response_descriptor_,
      ReadOnlyTree_Response::default_instance_,
      ReadOnlyTree_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Response));
  ReadOnlyTree_Response_ListDirectory_descriptor_ = ReadOnlyTree_Response_descriptor_->nested_type(0);
  static const int ReadOnlyTree_Response_ListDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_ListDirectory, child_),
  };
  ReadOnlyTree_Response_ListDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Response_ListDirectory_descriptor_,
      ReadOnlyTree_Response_ListDirectory::default_instance_,
      ReadOnlyTree_Response_ListDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_ListDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_ListDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Response_ListDirectory));
  ReadOnlyTree_Response_Read_descriptor_ = ReadOnlyTree_Response_descriptor_->nested_type(1);
  static const int ReadOnlyTree_Response_Read_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_Read, contents_),
  };
  ReadOnlyTree_Response_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Response_Read_descriptor_,
      ReadOnlyTree_Response_Read::default_instance_,
      ReadOnlyTree_Response_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Response_Read));
  ReadWriteTree_descriptor_ = file->message_type(9);
  static const int ReadWriteTree_offsets_[1] = {
  };
  ReadWriteTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_descriptor_,
      ReadWriteTree::default_instance_,
      ReadWriteTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree));
  ReadWriteTree_Request_descriptor_ = ReadWriteTree_descriptor_->nested_type(0);
  static const int ReadWriteTree_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, exactly_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, make_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, remove_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, remove_file_),
  };
  ReadWriteTree_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_descriptor_,
      ReadWriteTree_Request::default_instance_,
      ReadWriteTree_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request));
  ReadWriteTree_Request_MakeDirectory_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(0);
  static const int ReadWriteTree_Request_MakeDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_MakeDirectory, path_),
  };
  ReadWriteTree_Request_MakeDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_MakeDirectory_descriptor_,
      ReadWriteTree_Request_MakeDirectory::default_instance_,
      ReadWriteTree_Request_MakeDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_MakeDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_MakeDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_MakeDirectory));
  ReadWriteTree_Request_RemoveDirectory_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(1);
  static const int ReadWriteTree_Request_RemoveDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveDirectory, path_),
  };
  ReadWriteTree_Request_RemoveDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_RemoveDirectory_descriptor_,
      ReadWriteTree_Request_RemoveDirectory::default_instance_,
      ReadWriteTree_Request_RemoveDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_RemoveDirectory));
  ReadWriteTree_Request_Write_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(2);
  static const int ReadWriteTree_Request_Write_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, contents_),
  };
  ReadWriteTree_Request_Write_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_Write_descriptor_,
      ReadWriteTree_Request_Write::default_instance_,
      ReadWriteTree_Request_Write_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_Write));
  ReadWriteTree_Request_RemoveFile_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(3);
  static const int ReadWriteTree_Request_RemoveFile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveFile, path_),
  };
  ReadWriteTree_Request_RemoveFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_RemoveFile_descriptor_,
      ReadWriteTree_Request_RemoveFile::default_instance_,
      ReadWriteTree_Request_RemoveFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_RemoveFile));
  ReadWriteTree_Response_descriptor_ = ReadWriteTree_descriptor_->nested_type(1);
  static const int ReadWriteTree_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, error_),
  };
  ReadWriteTree_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Response_descriptor_,
      ReadWriteTree_Response::default_instance_,
      ReadWriteTree_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Response));
  Command_descriptor_ = file->message_type(10);
  static const int Command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, nanoseconds_since_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, open_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, tree_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  CommandResponse_descriptor_ = file->message_type(11);
  static const int CommandResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, open_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, tree_),
  };
  CommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandResponse_descriptor_,
      CommandResponse::default_instance_,
      CommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandResponse));
  OpCode_descriptor_ = file->enum_type(0);
  Status_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_build_2fProtocol_2fClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExactlyOnceRPCInfo_descriptor_, &ExactlyOnceRPCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSupportedRPCVersions_descriptor_, &GetSupportedRPCVersions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSupportedRPCVersions_Request_descriptor_, &GetSupportedRPCVersions_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSupportedRPCVersions_Response_descriptor_, &GetSupportedRPCVersions_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSession_descriptor_, &OpenSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSession_Request_descriptor_, &OpenSession_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSession_Response_descriptor_, &OpenSession_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfiguration_descriptor_, &GetConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfiguration_Request_descriptor_, &GetConfiguration_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfiguration_Response_descriptor_, &GetConfiguration_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_descriptor_, &SetConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Request_descriptor_, &SetConfiguration_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_descriptor_, &SetConfiguration_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_OK_descriptor_, &SetConfiguration_Response_OK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_ConfigurationChanged_descriptor_, &SetConfiguration_Response_ConfigurationChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_ConfigurationBad_descriptor_, &SetConfiguration_Response_ConfigurationBad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeCondition_descriptor_, &TreeCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_descriptor_, &ReadOnlyTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Request_descriptor_, &ReadOnlyTree_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Request_ListDirectory_descriptor_, &ReadOnlyTree_Request_ListDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Request_Read_descriptor_, &ReadOnlyTree_Request_Read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Response_descriptor_, &ReadOnlyTree_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Response_ListDirectory_descriptor_, &ReadOnlyTree_Response_ListDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Response_Read_descriptor_, &ReadOnlyTree_Response_Read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_descriptor_, &ReadWriteTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_descriptor_, &ReadWriteTree_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_MakeDirectory_descriptor_, &ReadWriteTree_Request_MakeDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_RemoveDirectory_descriptor_, &ReadWriteTree_Request_RemoveDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_Write_descriptor_, &ReadWriteTree_Request_Write::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_RemoveFile_descriptor_, &ReadWriteTree_Request_RemoveFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Response_descriptor_, &ReadWriteTree_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandResponse_descriptor_, &CommandResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_build_2fProtocol_2fClient_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete ExactlyOnceRPCInfo::default_instance_;
  delete ExactlyOnceRPCInfo_reflection_;
  delete GetSupportedRPCVersions::default_instance_;
  delete GetSupportedRPCVersions_reflection_;
  delete GetSupportedRPCVersions_Request::default_instance_;
  delete GetSupportedRPCVersions_Request_reflection_;
  delete GetSupportedRPCVersions_Response::default_instance_;
  delete GetSupportedRPCVersions_Response_reflection_;
  delete OpenSession::default_instance_;
  delete OpenSession_reflection_;
  delete OpenSession_Request::default_instance_;
  delete OpenSession_Request_reflection_;
  delete OpenSession_Response::default_instance_;
  delete OpenSession_Response_reflection_;
  delete Server::default_instance_;
  delete Server_reflection_;
  delete GetConfiguration::default_instance_;
  delete GetConfiguration_reflection_;
  delete GetConfiguration_Request::default_instance_;
  delete GetConfiguration_Request_reflection_;
  delete GetConfiguration_Response::default_instance_;
  delete GetConfiguration_Response_reflection_;
  delete SetConfiguration::default_instance_;
  delete SetConfiguration_reflection_;
  delete SetConfiguration_Request::default_instance_;
  delete SetConfiguration_Request_reflection_;
  delete SetConfiguration_Response::default_instance_;
  delete SetConfiguration_Response_reflection_;
  delete SetConfiguration_Response_OK::default_instance_;
  delete SetConfiguration_Response_OK_reflection_;
  delete SetConfiguration_Response_ConfigurationChanged::default_instance_;
  delete SetConfiguration_Response_ConfigurationChanged_reflection_;
  delete SetConfiguration_Response_ConfigurationBad::default_instance_;
  delete SetConfiguration_Response_ConfigurationBad_reflection_;
  delete TreeCondition::default_instance_;
  delete TreeCondition_reflection_;
  delete ReadOnlyTree::default_instance_;
  delete ReadOnlyTree_reflection_;
  delete ReadOnlyTree_Request::default_instance_;
  delete ReadOnlyTree_Request_reflection_;
  delete ReadOnlyTree_Request_ListDirectory::default_instance_;
  delete ReadOnlyTree_Request_ListDirectory_reflection_;
  delete ReadOnlyTree_Request_Read::default_instance_;
  delete ReadOnlyTree_Request_Read_reflection_;
  delete ReadOnlyTree_Response::default_instance_;
  delete ReadOnlyTree_Response_reflection_;
  delete ReadOnlyTree_Response_ListDirectory::default_instance_;
  delete ReadOnlyTree_Response_ListDirectory_reflection_;
  delete ReadOnlyTree_Response_Read::default_instance_;
  delete ReadOnlyTree_Response_Read_reflection_;
  delete ReadWriteTree::default_instance_;
  delete ReadWriteTree_reflection_;
  delete ReadWriteTree_Request::default_instance_;
  delete ReadWriteTree_Request_reflection_;
  delete ReadWriteTree_Request_MakeDirectory::default_instance_;
  delete ReadWriteTree_Request_MakeDirectory_reflection_;
  delete ReadWriteTree_Request_RemoveDirectory::default_instance_;
  delete ReadWriteTree_Request_RemoveDirectory_reflection_;
  delete ReadWriteTree_Request_Write::default_instance_;
  delete ReadWriteTree_Request_Write_reflection_;
  delete ReadWriteTree_Request_RemoveFile::default_instance_;
  delete ReadWriteTree_Request_RemoveFile_reflection_;
  delete ReadWriteTree_Response::default_instance_;
  delete ReadWriteTree_Response_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete CommandResponse::default_instance_;
  delete CommandResponse_reflection_;
}

void protobuf_AddDesc_build_2fProtocol_2fClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033build/Protocol/Client.proto\022\030LogCabin."
    "Protocol.Client\"\203\001\n\005Error\0228\n\nerror_code\030"
    "\001 \002(\0162$.LogCabin.Protocol.Client.Error.C"
    "ode\022\023\n\013leader_hint\030\002 \001(\t\"+\n\004Code\022\016\n\nNOT_"
    "LEADER\020\001\022\023\n\017SESSION_EXPIRED\020\002\"Z\n\022Exactly"
    "OnceRPCInfo\022\021\n\tclient_id\030\001 \002(\004\022\035\n\025first_"
    "outstanding_rpc\030\002 \002(\004\022\022\n\nrpc_number\030\003 \002("
    "\004\"Z\n\027GetSupportedRPCVersions\032\t\n\007Request\032"
    "4\n\010Response\022\023\n\013min_version\030\001 \002(\r\022\023\n\013max_"
    "version\030\002 \002(\r\"7\n\013OpenSession\032\t\n\007Request\032"
    "\035\n\010Response\022\021\n\tclient_id\030\001 \002(\004\",\n\006Server"
    "\022\021\n\tserver_id\030\001 \002(\004\022\017\n\007address\030\002 \002(\t\"h\n\020"
    "GetConfiguration\032\t\n\007Request\032I\n\010Response\022"
    "\n\n\002id\030\001 \002(\004\0221\n\007servers\030\002 \003(\0132 .LogCabin."
    "Protocol.Client.Server\"\350\003\n\020SetConfigurat"
    "ion\032P\n\007Request\022\016\n\006old_id\030\001 \002(\004\0225\n\013new_se"
    "rvers\030\002 \003(\0132 .LogCabin.Protocol.Client.S"
    "erver\032\201\003\n\010Response\022B\n\002ok\030\001 \001(\01326.LogCabi"
    "n.Protocol.Client.SetConfiguration.Respo"
    "nse.OK\022g\n\025configuration_changed\030\002 \001(\0132H."
    "LogCabin.Protocol.Client.SetConfiguratio"
    "n.Response.ConfigurationChanged\022_\n\021confi"
    "guration_bad\030\003 \001(\0132D.LogCabin.Protocol.C"
    "lient.SetConfiguration.Response.Configur"
    "ationBad\032\004\n\002OK\032\026\n\024ConfigurationChanged\032I"
    "\n\020ConfigurationBad\0225\n\013bad_servers\030\001 \003(\0132"
    " .LogCabin.Protocol.Client.Server\"/\n\rTre"
    "eCondition\022\014\n\004path\030\001 \002(\t\022\020\n\010contents\030\002 \002"
    "(\014\"\307\004\n\014ReadOnlyTree\032\223\002\n\007Request\022:\n\tcondi"
    "tion\030\013 \001(\0132\'.LogCabin.Protocol.Client.Tr"
    "eeCondition\022T\n\016list_directory\030\002 \001(\0132<.Lo"
    "gCabin.Protocol.Client.ReadOnlyTree.Requ"
    "est.ListDirectory\022A\n\004read\030\005 \001(\01323.LogCab"
    "in.Protocol.Client.ReadOnlyTree.Request."
    "Read\032\035\n\rListDirectory\022\014\n\004path\030\001 \002(\t\032\024\n\004R"
    "ead\022\014\n\004path\030\001 \002(\t\032\240\002\n\010Response\0220\n\006status"
    "\030\001 \002(\0162 .LogCabin.Protocol.Client.Status"
    "\022\r\n\005error\030\002 \001(\t\022U\n\016list_directory\030\003 \001(\0132"
    "=.LogCabin.Protocol.Client.ReadOnlyTree."
    "Response.ListDirectory\022B\n\004read\030\004 \001(\01324.L"
    "ogCabin.Protocol.Client.ReadOnlyTree.Res"
    "ponse.Read\032\036\n\rListDirectory\022\r\n\005child\030\001 \003"
    "(\t\032\030\n\004Read\022\020\n\010contents\030\001 \002(\014\"\266\005\n\rReadWri"
    "teTree\032\327\004\n\007Request\022B\n\014exactly_once\030\n \002(\013"
    "2,.LogCabin.Protocol.Client.ExactlyOnceR"
    "PCInfo\022:\n\tcondition\030\013 \001(\0132\'.LogCabin.Pro"
    "tocol.Client.TreeCondition\022U\n\016make_direc"
    "tory\030\001 \001(\0132=.LogCabin.Protocol.Client.Re"
    "adWriteTree.Request.MakeDirectory\022Y\n\020rem"
    "ove_directory\030\003 \001(\0132\?.LogCabin.Protocol."
    "Client.ReadWriteTree.Request.RemoveDirec"
    "tory\022D\n\005write\030\004 \001(\01325.LogCabin.Protocol."
    "Client.ReadWriteTree.Request.Write\022O\n\013re"
    "move_file\030\006 \001(\0132:.LogCabin.Protocol.Clie"
    "nt.ReadWriteTree.Request.RemoveFile\032\035\n\rM"
    "akeDirectory\022\014\n\004path\030\001 \002(\t\032\037\n\017RemoveDire"
    "ctory\022\014\n\004path\030\001 \002(\t\032\'\n\005Write\022\014\n\004path\030\001 \002"
    "(\t\022\020\n\010contents\030\002 \002(\014\032\032\n\nRemoveFile\022\014\n\004pa"
    "th\030\001 \002(\t\032K\n\010Response\0220\n\006status\030\001 \002(\0162 .L"
    "ogCabin.Protocol.Client.Status\022\r\n\005error\030"
    "\002 \001(\t\"\256\001\n\007Command\022\037\n\027nanoseconds_since_e"
    "poch\030\001 \001(\004\022C\n\014open_session\030\004 \001(\0132-.LogCa"
    "bin.Protocol.Client.OpenSession.Request\022"
    "=\n\004tree\030\005 \001(\0132/.LogCabin.Protocol.Client"
    ".ReadWriteTree.Request\"\227\001\n\017CommandRespon"
    "se\022D\n\014open_session\030\004 \001(\0132..LogCabin.Prot"
    "ocol.Client.OpenSession.Response\022>\n\004tree"
    "\030\005 \001(\01320.LogCabin.Protocol.Client.ReadWr"
    "iteTree.Response*\221\001\n\006OpCode\022\036\n\032GET_SUPPO"
    "RTED_RPC_VERSIONS\020\000\022\020\n\014OPEN_SESSION\020\001\022\025\n"
    "\021GET_CONFIGURATION\020\002\022\025\n\021SET_CONFIGURATIO"
    "N\020\003\022\022\n\016READ_ONLY_TREE\020\004\022\023\n\017READ_WRITE_TR"
    "EE\020\005*_\n\006Status\022\006\n\002OK\020\000\022\024\n\020INVALID_ARGUME"
    "NT\020\001\022\020\n\014LOOKUP_ERROR\020\002\022\016\n\nTYPE_ERROR\020\003\022\025"
    "\n\021CONDITION_NOT_MET\020\004", 2981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "build/Protocol/Client.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  ExactlyOnceRPCInfo::default_instance_ = new ExactlyOnceRPCInfo();
  GetSupportedRPCVersions::default_instance_ = new GetSupportedRPCVersions();
  GetSupportedRPCVersions_Request::default_instance_ = new GetSupportedRPCVersions_Request();
  GetSupportedRPCVersions_Response::default_instance_ = new GetSupportedRPCVersions_Response();
  OpenSession::default_instance_ = new OpenSession();
  OpenSession_Request::default_instance_ = new OpenSession_Request();
  OpenSession_Response::default_instance_ = new OpenSession_Response();
  Server::default_instance_ = new Server();
  GetConfiguration::default_instance_ = new GetConfiguration();
  GetConfiguration_Request::default_instance_ = new GetConfiguration_Request();
  GetConfiguration_Response::default_instance_ = new GetConfiguration_Response();
  SetConfiguration::default_instance_ = new SetConfiguration();
  SetConfiguration_Request::default_instance_ = new SetConfiguration_Request();
  SetConfiguration_Response::default_instance_ = new SetConfiguration_Response();
  SetConfiguration_Response_OK::default_instance_ = new SetConfiguration_Response_OK();
  SetConfiguration_Response_ConfigurationChanged::default_instance_ = new SetConfiguration_Response_ConfigurationChanged();
  SetConfiguration_Response_ConfigurationBad::default_instance_ = new SetConfiguration_Response_ConfigurationBad();
  TreeCondition::default_instance_ = new TreeCondition();
  ReadOnlyTree::default_instance_ = new ReadOnlyTree();
  ReadOnlyTree_Request::default_instance_ = new ReadOnlyTree_Request();
  ReadOnlyTree_Request_ListDirectory::default_instance_ = new ReadOnlyTree_Request_ListDirectory();
  ReadOnlyTree_Request_Read::default_instance_ = new ReadOnlyTree_Request_Read();
  ReadOnlyTree_Response::default_instance_ = new ReadOnlyTree_Response();
  ReadOnlyTree_Response_ListDirectory::default_instance_ = new ReadOnlyTree_Response_ListDirectory();
  ReadOnlyTree_Response_Read::default_instance_ = new ReadOnlyTree_Response_Read();
  ReadWriteTree::default_instance_ = new ReadWriteTree();
  ReadWriteTree_Request::default_instance_ = new ReadWriteTree_Request();
  ReadWriteTree_Request_MakeDirectory::default_instance_ = new ReadWriteTree_Request_MakeDirectory();
  ReadWriteTree_Request_RemoveDirectory::default_instance_ = new ReadWriteTree_Request_RemoveDirectory();
  ReadWriteTree_Request_Write::default_instance_ = new ReadWriteTree_Request_Write();
  ReadWriteTree_Request_RemoveFile::default_instance_ = new ReadWriteTree_Request_RemoveFile();
  ReadWriteTree_Response::default_instance_ = new ReadWriteTree_Response();
  Command::default_instance_ = new Command();
  CommandResponse::default_instance_ = new CommandResponse();
  Error::default_instance_->InitAsDefaultInstance();
  ExactlyOnceRPCInfo::default_instance_->InitAsDefaultInstance();
  GetSupportedRPCVersions::default_instance_->InitAsDefaultInstance();
  GetSupportedRPCVersions_Request::default_instance_->InitAsDefaultInstance();
  GetSupportedRPCVersions_Response::default_instance_->InitAsDefaultInstance();
  OpenSession::default_instance_->InitAsDefaultInstance();
  OpenSession_Request::default_instance_->InitAsDefaultInstance();
  OpenSession_Response::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  GetConfiguration::default_instance_->InitAsDefaultInstance();
  GetConfiguration_Request::default_instance_->InitAsDefaultInstance();
  GetConfiguration_Response::default_instance_->InitAsDefaultInstance();
  SetConfiguration::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Request::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response_OK::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response_ConfigurationChanged::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response_ConfigurationBad::default_instance_->InitAsDefaultInstance();
  TreeCondition::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Request::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Request_ListDirectory::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Request_Read::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Response::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Response_ListDirectory::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Response_Read::default_instance_->InitAsDefaultInstance();
  ReadWriteTree::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_MakeDirectory::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_RemoveDirectory::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_Write::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_RemoveFile::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Response::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  CommandResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_build_2fProtocol_2fClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_build_2fProtocol_2fClient_2eproto {
  StaticDescriptorInitializer_build_2fProtocol_2fClient_2eproto() {
    protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  }
} static_descriptor_initializer_build_2fProtocol_2fClient_2eproto_;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCode_descriptor_;
}
bool OpCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Code_descriptor_;
}
bool Error_Code_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Error_Code Error::NOT_LEADER;
const Error_Code Error::SESSION_EXPIRED;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Error::kErrorCodeFieldNumber;
const int Error::kLeaderHintFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 1;
  leader_hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (leader_hint_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_hint_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 1;
    if (has_leader_hint()) {
      if (leader_hint_ != &::google::protobuf::internal::kEmptyString) {
        leader_hint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogCabin.Protocol.Client.Error.Code error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Client::Error_Code_IsValid(value)) {
            set_error_code(static_cast< ::LogCabin::Protocol::Client::Error_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_hint;
        break;
      }

      // optional string leader_hint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_hint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_hint().data(), this->leader_hint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LogCabin.Protocol.Client.Error.Code error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string leader_hint = 2;
  if (has_leader_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_hint().data(), this->leader_hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_hint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LogCabin.Protocol.Client.Error.Code error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string leader_hint = 2;
  if (has_leader_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_hint().data(), this->leader_hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_hint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Client.Error.Code error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string leader_hint = 2;
    if (has_leader_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_hint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_leader_hint()) {
      set_leader_hint(from.leader_hint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(leader_hint_, other->leader_hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExactlyOnceRPCInfo::kClientIdFieldNumber;
const int ExactlyOnceRPCInfo::kFirstOutstandingRpcFieldNumber;
const int ExactlyOnceRPCInfo::kRpcNumberFieldNumber;
#endif  // !_MSC_VER

ExactlyOnceRPCInfo::ExactlyOnceRPCInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExactlyOnceRPCInfo::InitAsDefaultInstance() {
}

ExactlyOnceRPCInfo::ExactlyOnceRPCInfo(const ExactlyOnceRPCInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExactlyOnceRPCInfo::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
  rpc_number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExactlyOnceRPCInfo::~ExactlyOnceRPCInfo() {
  SharedDtor();
}

void ExactlyOnceRPCInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExactlyOnceRPCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExactlyOnceRPCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExactlyOnceRPCInfo_descriptor_;
}

const ExactlyOnceRPCInfo& ExactlyOnceRPCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ExactlyOnceRPCInfo* ExactlyOnceRPCInfo::default_instance_ = NULL;

ExactlyOnceRPCInfo* ExactlyOnceRPCInfo::New() const {
  return new ExactlyOnceRPCInfo;
}

void ExactlyOnceRPCInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = GOOGLE_ULONGLONG(0);
    first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
    rpc_number_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExactlyOnceRPCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_outstanding_rpc;
        break;
      }

      // required uint64 first_outstanding_rpc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_outstanding_rpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_outstanding_rpc_)));
          set_has_first_outstanding_rpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rpc_number;
        break;
      }

      // required uint64 rpc_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpc_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rpc_number_)));
          set_has_rpc_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExactlyOnceRPCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // required uint64 first_outstanding_rpc = 2;
  if (has_first_outstanding_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->first_outstanding_rpc(), output);
  }

  // required uint64 rpc_number = 3;
  if (has_rpc_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rpc_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExactlyOnceRPCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // required uint64 first_outstanding_rpc = 2;
  if (has_first_outstanding_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->first_outstanding_rpc(), target);
  }

  // required uint64 rpc_number = 3;
  if (has_rpc_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rpc_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExactlyOnceRPCInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // required uint64 first_outstanding_rpc = 2;
    if (has_first_outstanding_rpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_outstanding_rpc());
    }

    // required uint64 rpc_number = 3;
    if (has_rpc_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rpc_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExactlyOnceRPCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExactlyOnceRPCInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExactlyOnceRPCInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExactlyOnceRPCInfo::MergeFrom(const ExactlyOnceRPCInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_first_outstanding_rpc()) {
      set_first_outstanding_rpc(from.first_outstanding_rpc());
    }
    if (from.has_rpc_number()) {
      set_rpc_number(from.rpc_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExactlyOnceRPCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExactlyOnceRPCInfo::CopyFrom(const ExactlyOnceRPCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactlyOnceRPCInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ExactlyOnceRPCInfo::Swap(ExactlyOnceRPCInfo* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(first_outstanding_rpc_, other->first_outstanding_rpc_);
    std::swap(rpc_number_, other->rpc_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExactlyOnceRPCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExactlyOnceRPCInfo_descriptor_;
  metadata.reflection = ExactlyOnceRPCInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSupportedRPCVersions_Request::GetSupportedRPCVersions_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSupportedRPCVersions_Request::InitAsDefaultInstance() {
}

GetSupportedRPCVersions_Request::GetSupportedRPCVersions_Request(const GetSupportedRPCVersions_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSupportedRPCVersions_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSupportedRPCVersions_Request::~GetSupportedRPCVersions_Request() {
  SharedDtor();
}

void GetSupportedRPCVersions_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSupportedRPCVersions_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSupportedRPCVersions_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSupportedRPCVersions_Request_descriptor_;
}

const GetSupportedRPCVersions_Request& GetSupportedRPCVersions_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

GetSupportedRPCVersions_Request* GetSupportedRPCVersions_Request::default_instance_ = NULL;

GetSupportedRPCVersions_Request* GetSupportedRPCVersions_Request::New() const {
  return new GetSupportedRPCVersions_Request;
}

void GetSupportedRPCVersions_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSupportedRPCVersions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSupportedRPCVersions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSupportedRPCVersions_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSupportedRPCVersions_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSupportedRPCVersions_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSupportedRPCVersions_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSupportedRPCVersions_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSupportedRPCVersions_Request::MergeFrom(const GetSupportedRPCVersions_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSupportedRPCVersions_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSupportedRPCVersions_Request::CopyFrom(const GetSupportedRPCVersions_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSupportedRPCVersions_Request::IsInitialized() const {

  return true;
}

void GetSupportedRPCVersions_Request::Swap(GetSupportedRPCVersions_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSupportedRPCVersions_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSupportedRPCVersions_Request_descriptor_;
  metadata.reflection = GetSupportedRPCVersions_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetSupportedRPCVersions_Response::kMinVersionFieldNumber;
const int GetSupportedRPCVersions_Response::kMaxVersionFieldNumber;
#endif  // !_MSC_VER

GetSupportedRPCVersions_Response::GetSupportedRPCVersions_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSupportedRPCVersions_Response::InitAsDefaultInstance() {
}

GetSupportedRPCVersions_Response::GetSupportedRPCVersions_Response(const GetSupportedRPCVersions_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSupportedRPCVersions_Response::SharedCtor() {
  _cached_size_ = 0;
  min_version_ = 0u;
  max_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSupportedRPCVersions_Response::~GetSupportedRPCVersions_Response() {
  SharedDtor();
}

void GetSupportedRPCVersions_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSupportedRPCVersions_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSupportedRPCVersions_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSupportedRPCVersions_Response_descriptor_;
}

const GetSupportedRPCVersions_Response& GetSupportedRPCVersions_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

GetSupportedRPCVersions_Response* GetSupportedRPCVersions_Response::default_instance_ = NULL;

GetSupportedRPCVersions_Response* GetSupportedRPCVersions_Response::New() const {
  return new GetSupportedRPCVersions_Response;
}

void GetSupportedRPCVersions_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_version_ = 0u;
    max_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSupportedRPCVersions_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 min_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_version_)));
          set_has_min_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_version;
        break;
      }

      // required uint32 max_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_version_)));
          set_has_max_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSupportedRPCVersions_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 min_version = 1;
  if (has_min_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_version(), output);
  }

  // required uint32 max_version = 2;
  if (has_max_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSupportedRPCVersions_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 min_version = 1;
  if (has_min_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_version(), target);
  }

  // required uint32 max_version = 2;
  if (has_max_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSupportedRPCVersions_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 min_version = 1;
    if (has_min_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_version());
    }

    // required uint32 max_version = 2;
    if (has_max_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSupportedRPCVersions_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSupportedRPCVersions_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSupportedRPCVersions_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSupportedRPCVersions_Response::MergeFrom(const GetSupportedRPCVersions_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_version()) {
      set_min_version(from.min_version());
    }
    if (from.has_max_version()) {
      set_max_version(from.max_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSupportedRPCVersions_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSupportedRPCVersions_Response::CopyFrom(const GetSupportedRPCVersions_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSupportedRPCVersions_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetSupportedRPCVersions_Response::Swap(GetSupportedRPCVersions_Response* other) {
  if (other != this) {
    std::swap(min_version_, other->min_version_);
    std::swap(max_version_, other->max_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSupportedRPCVersions_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSupportedRPCVersions_Response_descriptor_;
  metadata.reflection = GetSupportedRPCVersions_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSupportedRPCVersions::GetSupportedRPCVersions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSupportedRPCVersions::InitAsDefaultInstance() {
}

GetSupportedRPCVersions::GetSupportedRPCVersions(const GetSupportedRPCVersions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSupportedRPCVersions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSupportedRPCVersions::~GetSupportedRPCVersions() {
  SharedDtor();
}

void GetSupportedRPCVersions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSupportedRPCVersions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSupportedRPCVersions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSupportedRPCVersions_descriptor_;
}

const GetSupportedRPCVersions& GetSupportedRPCVersions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

GetSupportedRPCVersions* GetSupportedRPCVersions::default_instance_ = NULL;

GetSupportedRPCVersions* GetSupportedRPCVersions::New() const {
  return new GetSupportedRPCVersions;
}

void GetSupportedRPCVersions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSupportedRPCVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSupportedRPCVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSupportedRPCVersions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSupportedRPCVersions::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSupportedRPCVersions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSupportedRPCVersions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSupportedRPCVersions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSupportedRPCVersions::MergeFrom(const GetSupportedRPCVersions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSupportedRPCVersions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSupportedRPCVersions::CopyFrom(const GetSupportedRPCVersions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSupportedRPCVersions::IsInitialized() const {

  return true;
}

void GetSupportedRPCVersions::Swap(GetSupportedRPCVersions* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSupportedRPCVersions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSupportedRPCVersions_descriptor_;
  metadata.reflection = GetSupportedRPCVersions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenSession_Request::OpenSession_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenSession_Request::InitAsDefaultInstance() {
}

OpenSession_Request::OpenSession_Request(const OpenSession_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenSession_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSession_Request::~OpenSession_Request() {
  SharedDtor();
}

void OpenSession_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSession_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSession_Request_descriptor_;
}

const OpenSession_Request& OpenSession_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

OpenSession_Request* OpenSession_Request::default_instance_ = NULL;

OpenSession_Request* OpenSession_Request::New() const {
  return new OpenSession_Request;
}

void OpenSession_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OpenSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenSession_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenSession_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSession_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSession_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSession_Request::MergeFrom(const OpenSession_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSession_Request::CopyFrom(const OpenSession_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession_Request::IsInitialized() const {

  return true;
}

void OpenSession_Request::Swap(OpenSession_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSession_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSession_Request_descriptor_;
  metadata.reflection = OpenSession_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpenSession_Response::kClientIdFieldNumber;
#endif  // !_MSC_VER

OpenSession_Response::OpenSession_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenSession_Response::InitAsDefaultInstance() {
}

OpenSession_Response::OpenSession_Response(const OpenSession_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenSession_Response::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSession_Response::~OpenSession_Response() {
  SharedDtor();
}

void OpenSession_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSession_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSession_Response_descriptor_;
}

const OpenSession_Response& OpenSession_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

OpenSession_Response* OpenSession_Response::default_instance_ = NULL;

OpenSession_Response* OpenSession_Response::New() const {
  return new OpenSession_Response;
}

void OpenSession_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenSession_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenSession_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSession_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSession_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSession_Response::MergeFrom(const OpenSession_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSession_Response::CopyFrom(const OpenSession_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenSession_Response::Swap(OpenSession_Response* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSession_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSession_Response_descriptor_;
  metadata.reflection = OpenSession_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenSession::OpenSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenSession::InitAsDefaultInstance() {
}

OpenSession::OpenSession(const OpenSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSession::~OpenSession() {
  SharedDtor();
}

void OpenSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSession_descriptor_;
}

const OpenSession& OpenSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

OpenSession* OpenSession::default_instance_ = NULL;

OpenSession* OpenSession::New() const {
  return new OpenSession;
}

void OpenSession::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OpenSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenSession::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSession::MergeFrom(const OpenSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSession::CopyFrom(const OpenSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession::IsInitialized() const {

  return true;
}

void OpenSession::Swap(OpenSession* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSession_descriptor_;
  metadata.reflection = OpenSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server::kServerIdFieldNumber;
const int Server::kAddressFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetConfiguration_Request::GetConfiguration_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetConfiguration_Request::InitAsDefaultInstance() {
}

GetConfiguration_Request::GetConfiguration_Request(const GetConfiguration_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetConfiguration_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfiguration_Request::~GetConfiguration_Request() {
  SharedDtor();
}

void GetConfiguration_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfiguration_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfiguration_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfiguration_Request_descriptor_;
}

const GetConfiguration_Request& GetConfiguration_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

GetConfiguration_Request* GetConfiguration_Request::default_instance_ = NULL;

GetConfiguration_Request* GetConfiguration_Request::New() const {
  return new GetConfiguration_Request;
}

void GetConfiguration_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfiguration_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetConfiguration_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetConfiguration_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetConfiguration_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfiguration_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfiguration_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfiguration_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfiguration_Request::MergeFrom(const GetConfiguration_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfiguration_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfiguration_Request::CopyFrom(const GetConfiguration_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfiguration_Request::IsInitialized() const {

  return true;
}

void GetConfiguration_Request::Swap(GetConfiguration_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfiguration_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfiguration_Request_descriptor_;
  metadata.reflection = GetConfiguration_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetConfiguration_Response::kIdFieldNumber;
const int GetConfiguration_Response::kServersFieldNumber;
#endif  // !_MSC_VER

GetConfiguration_Response::GetConfiguration_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetConfiguration_Response::InitAsDefaultInstance() {
}

GetConfiguration_Response::GetConfiguration_Response(const GetConfiguration_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetConfiguration_Response::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfiguration_Response::~GetConfiguration_Response() {
  SharedDtor();
}

void GetConfiguration_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfiguration_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfiguration_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfiguration_Response_descriptor_;
}

const GetConfiguration_Response& GetConfiguration_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

GetConfiguration_Response* GetConfiguration_Response::default_instance_ = NULL;

GetConfiguration_Response* GetConfiguration_Response::New() const {
  return new GetConfiguration_Response;
}

void GetConfiguration_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfiguration_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        break;
      }

      // repeated .LogCabin.Protocol.Client.Server servers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetConfiguration_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetConfiguration_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetConfiguration_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfiguration_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfiguration_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfiguration_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfiguration_Response::MergeFrom(const GetConfiguration_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfiguration_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfiguration_Response::CopyFrom(const GetConfiguration_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfiguration_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < servers_size(); i++) {
    if (!this->servers(i).IsInitialized()) return false;
  }
  return true;
}

void GetConfiguration_Response::Swap(GetConfiguration_Response* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfiguration_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfiguration_Response_descriptor_;
  metadata.reflection = GetConfiguration_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetConfiguration::GetConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetConfiguration::InitAsDefaultInstance() {
}

GetConfiguration::GetConfiguration(const GetConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetConfiguration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfiguration::~GetConfiguration() {
  SharedDtor();
}

void GetConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfiguration_descriptor_;
}

const GetConfiguration& GetConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

GetConfiguration* GetConfiguration::default_instance_ = NULL;

GetConfiguration* GetConfiguration::New() const {
  return new GetConfiguration;
}

void GetConfiguration::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetConfiguration::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfiguration::MergeFrom(const GetConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfiguration::CopyFrom(const GetConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfiguration::IsInitialized() const {

  return true;
}

void GetConfiguration::Swap(GetConfiguration* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfiguration_descriptor_;
  metadata.reflection = GetConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetConfiguration_Request::kOldIdFieldNumber;
const int SetConfiguration_Request::kNewServersFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Request::SetConfiguration_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetConfiguration_Request::InitAsDefaultInstance() {
}

SetConfiguration_Request::SetConfiguration_Request(const SetConfiguration_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetConfiguration_Request::SharedCtor() {
  _cached_size_ = 0;
  old_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Request::~SetConfiguration_Request() {
  SharedDtor();
}

void SetConfiguration_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Request_descriptor_;
}

const SetConfiguration_Request& SetConfiguration_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Request* SetConfiguration_Request::default_instance_ = NULL;

SetConfiguration_Request* SetConfiguration_Request::New() const {
  return new SetConfiguration_Request;
}

void SetConfiguration_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_id_ = GOOGLE_ULONGLONG(0);
  }
  new_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 old_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_id_)));
          set_has_old_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_servers;
        break;
      }

      // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetConfiguration_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 old_id = 1;
  if (has_old_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->old_id(), output);
  }

  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  for (int i = 0; i < this->new_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetConfiguration_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 old_id = 1;
  if (has_old_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->old_id(), target);
  }

  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  for (int i = 0; i < this->new_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetConfiguration_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 old_id = 1;
    if (has_old_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_id());
    }

  }
  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  total_size += 1 * this->new_servers_size();
  for (int i = 0; i < this->new_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Request::MergeFrom(const SetConfiguration_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_servers_.MergeFrom(from.new_servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_id()) {
      set_old_id(from.old_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Request::CopyFrom(const SetConfiguration_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < new_servers_size(); i++) {
    if (!this->new_servers(i).IsInitialized()) return false;
  }
  return true;
}

void SetConfiguration_Request::Swap(SetConfiguration_Request* other) {
  if (other != this) {
    std::swap(old_id_, other->old_id_);
    new_servers_.Swap(&other->new_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Request_descriptor_;
  metadata.reflection = SetConfiguration_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetConfiguration_Response_OK::SetConfiguration_Response_OK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetConfiguration_Response_OK::InitAsDefaultInstance() {
}

SetConfiguration_Response_OK::SetConfiguration_Response_OK(const SetConfiguration_Response_OK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetConfiguration_Response_OK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response_OK::~SetConfiguration_Response_OK() {
  SharedDtor();
}

void SetConfiguration_Response_OK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Response_OK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response_OK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_OK_descriptor_;
}

const SetConfiguration_Response_OK& SetConfiguration_Response_OK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response_OK* SetConfiguration_Response_OK::default_instance_ = NULL;

SetConfiguration_Response_OK* SetConfiguration_Response_OK::New() const {
  return new SetConfiguration_Response_OK;
}

void SetConfiguration_Response_OK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response_OK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetConfiguration_Response_OK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetConfiguration_Response_OK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetConfiguration_Response_OK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response_OK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response_OK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response_OK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response_OK::MergeFrom(const SetConfiguration_Response_OK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response_OK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response_OK::CopyFrom(const SetConfiguration_Response_OK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response_OK::IsInitialized() const {

  return true;
}

void SetConfiguration_Response_OK::Swap(SetConfiguration_Response_OK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response_OK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_OK_descriptor_;
  metadata.reflection = SetConfiguration_Response_OK_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetConfiguration_Response_ConfigurationChanged::SetConfiguration_Response_ConfigurationChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetConfiguration_Response_ConfigurationChanged::InitAsDefaultInstance() {
}

SetConfiguration_Response_ConfigurationChanged::SetConfiguration_Response_ConfigurationChanged(const SetConfiguration_Response_ConfigurationChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetConfiguration_Response_ConfigurationChanged::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response_ConfigurationChanged::~SetConfiguration_Response_ConfigurationChanged() {
  SharedDtor();
}

void SetConfiguration_Response_ConfigurationChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Response_ConfigurationChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_ConfigurationChanged_descriptor_;
}

const SetConfiguration_Response_ConfigurationChanged& SetConfiguration_Response_ConfigurationChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response_ConfigurationChanged* SetConfiguration_Response_ConfigurationChanged::default_instance_ = NULL;

SetConfiguration_Response_ConfigurationChanged* SetConfiguration_Response_ConfigurationChanged::New() const {
  return new SetConfiguration_Response_ConfigurationChanged;
}

void SetConfiguration_Response_ConfigurationChanged::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response_ConfigurationChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetConfiguration_Response_ConfigurationChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetConfiguration_Response_ConfigurationChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetConfiguration_Response_ConfigurationChanged::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response_ConfigurationChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response_ConfigurationChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response_ConfigurationChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response_ConfigurationChanged::MergeFrom(const SetConfiguration_Response_ConfigurationChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response_ConfigurationChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response_ConfigurationChanged::CopyFrom(const SetConfiguration_Response_ConfigurationChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response_ConfigurationChanged::IsInitialized() const {

  return true;
}

void SetConfiguration_Response_ConfigurationChanged::Swap(SetConfiguration_Response_ConfigurationChanged* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response_ConfigurationChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_ConfigurationChanged_descriptor_;
  metadata.reflection = SetConfiguration_Response_ConfigurationChanged_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SetConfiguration_Response_ConfigurationBad::kBadServersFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Response_ConfigurationBad::SetConfiguration_Response_ConfigurationBad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetConfiguration_Response_ConfigurationBad::InitAsDefaultInstance() {
}

SetConfiguration_Response_ConfigurationBad::SetConfiguration_Response_ConfigurationBad(const SetConfiguration_Response_ConfigurationBad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetConfiguration_Response_ConfigurationBad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response_ConfigurationBad::~SetConfiguration_Response_ConfigurationBad() {
  SharedDtor();
}

void SetConfiguration_Response_ConfigurationBad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Response_ConfigurationBad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationBad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_ConfigurationBad_descriptor_;
}

const SetConfiguration_Response_ConfigurationBad& SetConfiguration_Response_ConfigurationBad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response_ConfigurationBad* SetConfiguration_Response_ConfigurationBad::default_instance_ = NULL;

SetConfiguration_Response_ConfigurationBad* SetConfiguration_Response_ConfigurationBad::New() const {
  return new SetConfiguration_Response_ConfigurationBad;
}

void SetConfiguration_Response_ConfigurationBad::Clear() {
  bad_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response_ConfigurationBad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bad_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bad_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bad_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetConfiguration_Response_ConfigurationBad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  for (int i = 0; i < this->bad_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bad_servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetConfiguration_Response_ConfigurationBad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  for (int i = 0; i < this->bad_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bad_servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetConfiguration_Response_ConfigurationBad::ByteSize() const {
  int total_size = 0;

  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  total_size += 1 * this->bad_servers_size();
  for (int i = 0; i < this->bad_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bad_servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response_ConfigurationBad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response_ConfigurationBad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response_ConfigurationBad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response_ConfigurationBad::MergeFrom(const SetConfiguration_Response_ConfigurationBad& from) {
  GOOGLE_CHECK_NE(&from, this);
  bad_servers_.MergeFrom(from.bad_servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response_ConfigurationBad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response_ConfigurationBad::CopyFrom(const SetConfiguration_Response_ConfigurationBad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response_ConfigurationBad::IsInitialized() const {

  for (int i = 0; i < bad_servers_size(); i++) {
    if (!this->bad_servers(i).IsInitialized()) return false;
  }
  return true;
}

void SetConfiguration_Response_ConfigurationBad::Swap(SetConfiguration_Response_ConfigurationBad* other) {
  if (other != this) {
    bad_servers_.Swap(&other->bad_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response_ConfigurationBad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_ConfigurationBad_descriptor_;
  metadata.reflection = SetConfiguration_Response_ConfigurationBad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SetConfiguration_Response::kOkFieldNumber;
const int SetConfiguration_Response::kConfigurationChangedFieldNumber;
const int SetConfiguration_Response::kConfigurationBadFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Response::SetConfiguration_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetConfiguration_Response::InitAsDefaultInstance() {
  ok_ = const_cast< ::LogCabin::Protocol::Client::SetConfiguration_Response_OK*>(&::LogCabin::Protocol::Client::SetConfiguration_Response_OK::default_instance());
  configuration_changed_ = const_cast< ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged*>(&::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::default_instance());
  configuration_bad_ = const_cast< ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad*>(&::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::default_instance());
}

SetConfiguration_Response::SetConfiguration_Response(const SetConfiguration_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetConfiguration_Response::SharedCtor() {
  _cached_size_ = 0;
  ok_ = NULL;
  configuration_changed_ = NULL;
  configuration_bad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response::~SetConfiguration_Response() {
  SharedDtor();
}

void SetConfiguration_Response::SharedDtor() {
  if (this != default_instance_) {
    delete ok_;
    delete configuration_changed_;
    delete configuration_bad_;
  }
}

void SetConfiguration_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_descriptor_;
}

const SetConfiguration_Response& SetConfiguration_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response* SetConfiguration_Response::default_instance_ = NULL;

SetConfiguration_Response* SetConfiguration_Response::New() const {
  return new SetConfiguration_Response;
}

void SetConfiguration_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ok()) {
      if (ok_ != NULL) ok_->::LogCabin::Protocol::Client::SetConfiguration_Response_OK::Clear();
    }
    if (has_configuration_changed()) {
      if (configuration_changed_ != NULL) configuration_changed_->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::Clear();
    }
    if (has_configuration_bad()) {
      if (configuration_bad_ != NULL) configuration_bad_->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration_changed;
        break;
      }

      // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration_changed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configuration_bad;
        break;
      }

      // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_bad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration_bad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetConfiguration_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ok(), output);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
  if (has_configuration_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configuration_changed(), output);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
  if (has_configuration_bad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configuration_bad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetConfiguration_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ok(), target);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
  if (has_configuration_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configuration_changed(), target);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
  if (has_configuration_bad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configuration_bad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetConfiguration_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ok());
    }

    // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
    if (has_configuration_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration_changed());
    }

    // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
    if (has_configuration_bad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration_bad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response::MergeFrom(const SetConfiguration_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ok()) {
      mutable_ok()->::LogCabin::Protocol::Client::SetConfiguration_Response_OK::MergeFrom(from.ok());
    }
    if (from.has_configuration_changed()) {
      mutable_configuration_changed()->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::MergeFrom(from.configuration_changed());
    }
    if (from.has_configuration_bad()) {
      mutable_configuration_bad()->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::MergeFrom(from.configuration_bad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response::CopyFrom(const SetConfiguration_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response::IsInitialized() const {

  if (has_configuration_bad()) {
    if (!this->configuration_bad().IsInitialized()) return false;
  }
  return true;
}

void SetConfiguration_Response::Swap(SetConfiguration_Response* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(configuration_changed_, other->configuration_changed_);
    std::swap(configuration_bad_, other->configuration_bad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_descriptor_;
  metadata.reflection = SetConfiguration_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetConfiguration::SetConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetConfiguration::InitAsDefaultInstance() {
}

SetConfiguration::SetConfiguration(const SetConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetConfiguration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration::~SetConfiguration() {
  SharedDtor();
}

void SetConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_descriptor_;
}

const SetConfiguration& SetConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration* SetConfiguration::default_instance_ = NULL;

SetConfiguration* SetConfiguration::New() const {
  return new SetConfiguration;
}

void SetConfiguration::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetConfiguration::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration::MergeFrom(const SetConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration::CopyFrom(const SetConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration::IsInitialized() const {

  return true;
}

void SetConfiguration::Swap(SetConfiguration* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_descriptor_;
  metadata.reflection = SetConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeCondition::kPathFieldNumber;
const int TreeCondition::kContentsFieldNumber;
#endif  // !_MSC_VER

TreeCondition::TreeCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreeCondition::InitAsDefaultInstance() {
}

TreeCondition::TreeCondition(const TreeCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreeCondition::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeCondition::~TreeCondition() {
  SharedDtor();
}

void TreeCondition::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void TreeCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeCondition_descriptor_;
}

const TreeCondition& TreeCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

TreeCondition* TreeCondition::default_instance_ = NULL;

TreeCondition* TreeCondition::New() const {
  return new TreeCondition;
}

void TreeCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // required bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreeCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreeCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreeCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeCondition::MergeFrom(const TreeCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeCondition::CopyFrom(const TreeCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TreeCondition::Swap(TreeCondition* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeCondition_descriptor_;
  metadata.reflection = TreeCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadOnlyTree_Request_ListDirectory::kPathFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Request_ListDirectory::ReadOnlyTree_Request_ListDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree_Request_ListDirectory::InitAsDefaultInstance() {
}

ReadOnlyTree_Request_ListDirectory::ReadOnlyTree_Request_ListDirectory(const ReadOnlyTree_Request_ListDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree_Request_ListDirectory::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Request_ListDirectory::~ReadOnlyTree_Request_ListDirectory() {
  SharedDtor();
}

void ReadOnlyTree_Request_ListDirectory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Request_ListDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_ListDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Request_ListDirectory_descriptor_;
}

const ReadOnlyTree_Request_ListDirectory& ReadOnlyTree_Request_ListDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Request_ListDirectory* ReadOnlyTree_Request_ListDirectory::default_instance_ = NULL;

ReadOnlyTree_Request_ListDirectory* ReadOnlyTree_Request_ListDirectory::New() const {
  return new ReadOnlyTree_Request_ListDirectory;
}

void ReadOnlyTree_Request_ListDirectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Request_ListDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadOnlyTree_Request_ListDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree_Request_ListDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree_Request_ListDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Request_ListDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Request_ListDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Request_ListDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Request_ListDirectory::MergeFrom(const ReadOnlyTree_Request_ListDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Request_ListDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Request_ListDirectory::CopyFrom(const ReadOnlyTree_Request_ListDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Request_ListDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadOnlyTree_Request_ListDirectory::Swap(ReadOnlyTree_Request_ListDirectory* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Request_ListDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Request_ListDirectory_descriptor_;
  metadata.reflection = ReadOnlyTree_Request_ListDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Request_Read::kPathFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Request_Read::ReadOnlyTree_Request_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree_Request_Read::InitAsDefaultInstance() {
}

ReadOnlyTree_Request_Read::ReadOnlyTree_Request_Read(const ReadOnlyTree_Request_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree_Request_Read::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Request_Read::~ReadOnlyTree_Request_Read() {
  SharedDtor();
}

void ReadOnlyTree_Request_Read::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Request_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Request_Read_descriptor_;
}

const ReadOnlyTree_Request_Read& ReadOnlyTree_Request_Read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Request_Read* ReadOnlyTree_Request_Read::default_instance_ = NULL;

ReadOnlyTree_Request_Read* ReadOnlyTree_Request_Read::New() const {
  return new ReadOnlyTree_Request_Read;
}

void ReadOnlyTree_Request_Read::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Request_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadOnlyTree_Request_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree_Request_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree_Request_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Request_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Request_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Request_Read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Request_Read::MergeFrom(const ReadOnlyTree_Request_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Request_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Request_Read::CopyFrom(const ReadOnlyTree_Request_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Request_Read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadOnlyTree_Request_Read::Swap(ReadOnlyTree_Request_Read* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Request_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Request_Read_descriptor_;
  metadata.reflection = ReadOnlyTree_Request_Read_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Request::kConditionFieldNumber;
const int ReadOnlyTree_Request::kListDirectoryFieldNumber;
const int ReadOnlyTree_Request::kReadFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Request::ReadOnlyTree_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree_Request::InitAsDefaultInstance() {
  condition_ = const_cast< ::LogCabin::Protocol::Client::TreeCondition*>(&::LogCabin::Protocol::Client::TreeCondition::default_instance());
  list_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::default_instance());
  read_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::default_instance());
}

ReadOnlyTree_Request::ReadOnlyTree_Request(const ReadOnlyTree_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree_Request::SharedCtor() {
  _cached_size_ = 0;
  condition_ = NULL;
  list_directory_ = NULL;
  read_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Request::~ReadOnlyTree_Request() {
  SharedDtor();
}

void ReadOnlyTree_Request::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
    delete list_directory_;
    delete read_;
  }
}

void ReadOnlyTree_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Request_descriptor_;
}

const ReadOnlyTree_Request& ReadOnlyTree_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Request* ReadOnlyTree_Request::default_instance_ = NULL;

ReadOnlyTree_Request* ReadOnlyTree_Request::New() const {
  return new ReadOnlyTree_Request;
}

void ReadOnlyTree_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_condition()) {
      if (condition_ != NULL) condition_->::LogCabin::Protocol::Client::TreeCondition::Clear();
    }
    if (has_list_directory()) {
      if (list_directory_ != NULL) list_directory_->::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_directory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_condition;
        break;
      }

      // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadOnlyTree_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
  if (has_list_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(), output);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
  if (has_list_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(), target);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
    if (has_list_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Request::MergeFrom(const ReadOnlyTree_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      mutable_condition()->::LogCabin::Protocol::Client::TreeCondition::MergeFrom(from.condition());
    }
    if (from.has_list_directory()) {
      mutable_list_directory()->::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::MergeFrom(from.list_directory());
    }
    if (from.has_read()) {
      mutable_read()->::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::MergeFrom(from.read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Request::CopyFrom(const ReadOnlyTree_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Request::IsInitialized() const {

  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_list_directory()) {
    if (!this->list_directory().IsInitialized()) return false;
  }
  if (has_read()) {
    if (!this->read().IsInitialized()) return false;
  }
  return true;
}

void ReadOnlyTree_Request::Swap(ReadOnlyTree_Request* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(list_directory_, other->list_directory_);
    std::swap(read_, other->read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Request_descriptor_;
  metadata.reflection = ReadOnlyTree_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Response_ListDirectory::kChildFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Response_ListDirectory::ReadOnlyTree_Response_ListDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree_Response_ListDirectory::InitAsDefaultInstance() {
}

ReadOnlyTree_Response_ListDirectory::ReadOnlyTree_Response_ListDirectory(const ReadOnlyTree_Response_ListDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree_Response_ListDirectory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Response_ListDirectory::~ReadOnlyTree_Response_ListDirectory() {
  SharedDtor();
}

void ReadOnlyTree_Response_ListDirectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Response_ListDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_ListDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Response_ListDirectory_descriptor_;
}

const ReadOnlyTree_Response_ListDirectory& ReadOnlyTree_Response_ListDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Response_ListDirectory* ReadOnlyTree_Response_ListDirectory::default_instance_ = NULL;

ReadOnlyTree_Response_ListDirectory* ReadOnlyTree_Response_ListDirectory::New() const {
  return new ReadOnlyTree_Response_ListDirectory;
}

void ReadOnlyTree_Response_ListDirectory::Clear() {
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Response_ListDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string child = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_child()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->child(this->child_size() - 1).data(),
            this->child(this->child_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_child;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadOnlyTree_Response_ListDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string child = 1;
  for (int i = 0; i < this->child_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->child(i).data(), this->child(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->child(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree_Response_ListDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string child = 1;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->child(i).data(), this->child(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->child(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree_Response_ListDirectory::ByteSize() const {
  int total_size = 0;

  // repeated string child = 1;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->child(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Response_ListDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Response_ListDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Response_ListDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Response_ListDirectory::MergeFrom(const ReadOnlyTree_Response_ListDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_.MergeFrom(from.child_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Response_ListDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Response_ListDirectory::CopyFrom(const ReadOnlyTree_Response_ListDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Response_ListDirectory::IsInitialized() const {

  return true;
}

void ReadOnlyTree_Response_ListDirectory::Swap(ReadOnlyTree_Response_ListDirectory* other) {
  if (other != this) {
    child_.Swap(&other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Response_ListDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Response_ListDirectory_descriptor_;
  metadata.reflection = ReadOnlyTree_Response_ListDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Response_Read::kContentsFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Response_Read::ReadOnlyTree_Response_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree_Response_Read::InitAsDefaultInstance() {
}

ReadOnlyTree_Response_Read::ReadOnlyTree_Response_Read(const ReadOnlyTree_Response_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree_Response_Read::SharedCtor() {
  _cached_size_ = 0;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Response_Read::~ReadOnlyTree_Response_Read() {
  SharedDtor();
}

void ReadOnlyTree_Response_Read::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Response_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Response_Read_descriptor_;
}

const ReadOnlyTree_Response_Read& ReadOnlyTree_Response_Read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Response_Read* ReadOnlyTree_Response_Read::default_instance_ = NULL;

ReadOnlyTree_Response_Read* ReadOnlyTree_Response_Read::New() const {
  return new ReadOnlyTree_Response_Read;
}

void ReadOnlyTree_Response_Read::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Response_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadOnlyTree_Response_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes contents = 1;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree_Response_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes contents = 1;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree_Response_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes contents = 1;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Response_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Response_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Response_Read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Response_Read::MergeFrom(const ReadOnlyTree_Response_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Response_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Response_Read::CopyFrom(const ReadOnlyTree_Response_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Response_Read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadOnlyTree_Response_Read::Swap(ReadOnlyTree_Response_Read* other) {
  if (other != this) {
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Response_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Response_Read_descriptor_;
  metadata.reflection = ReadOnlyTree_Response_Read_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Response::kStatusFieldNumber;
const int ReadOnlyTree_Response::kErrorFieldNumber;
const int ReadOnlyTree_Response::kListDirectoryFieldNumber;
const int ReadOnlyTree_Response::kReadFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Response::ReadOnlyTree_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree_Response::InitAsDefaultInstance() {
  list_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::default_instance());
  read_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::default_instance());
}

ReadOnlyTree_Response::ReadOnlyTree_Response(const ReadOnlyTree_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree_Response::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  list_directory_ = NULL;
  read_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Response::~ReadOnlyTree_Response() {
  SharedDtor();
}

void ReadOnlyTree_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete list_directory_;
    delete read_;
  }
}

void ReadOnlyTree_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Response_descriptor_;
}

const ReadOnlyTree_Response& ReadOnlyTree_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Response* ReadOnlyTree_Response::default_instance_ = NULL;

ReadOnlyTree_Response* ReadOnlyTree_Response::New() const {
  return new ReadOnlyTree_Response;
}

void ReadOnlyTree_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_list_directory()) {
      if (list_directory_ != NULL) list_directory_->::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogCabin.Protocol.Client.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Client::Status_IsValid(value)) {
            set_status(static_cast< ::LogCabin::Protocol::Client::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_directory;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_directory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_read;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadOnlyTree_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
  if (has_list_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->read(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
  if (has_list_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->read(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Client.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
    if (has_list_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Response::MergeFrom(const ReadOnlyTree_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_list_directory()) {
      mutable_list_directory()->::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::MergeFrom(from.list_directory());
    }
    if (from.has_read()) {
      mutable_read()->::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::MergeFrom(from.read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Response::CopyFrom(const ReadOnlyTree_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_read()) {
    if (!this->read().IsInitialized()) return false;
  }
  return true;
}

void ReadOnlyTree_Response::Swap(ReadOnlyTree_Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(list_directory_, other->list_directory_);
    std::swap(read_, other->read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Response_descriptor_;
  metadata.reflection = ReadOnlyTree_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReadOnlyTree::ReadOnlyTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadOnlyTree::InitAsDefaultInstance() {
}

ReadOnlyTree::ReadOnlyTree(const ReadOnlyTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadOnlyTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree::~ReadOnlyTree() {
  SharedDtor();
}

void ReadOnlyTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadOnlyTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_descriptor_;
}

const ReadOnlyTree& ReadOnlyTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree* ReadOnlyTree::default_instance_ = NULL;

ReadOnlyTree* ReadOnlyTree::New() const {
  return new ReadOnlyTree;
}

void ReadOnlyTree::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReadOnlyTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadOnlyTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadOnlyTree::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree::MergeFrom(const ReadOnlyTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree::CopyFrom(const ReadOnlyTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree::IsInitialized() const {

  return true;
}

void ReadOnlyTree::Swap(ReadOnlyTree* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_descriptor_;
  metadata.reflection = ReadOnlyTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadWriteTree_Request_MakeDirectory::kPathFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_MakeDirectory::ReadWriteTree_Request_MakeDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree_Request_MakeDirectory::InitAsDefaultInstance() {
}

ReadWriteTree_Request_MakeDirectory::ReadWriteTree_Request_MakeDirectory(const ReadWriteTree_Request_MakeDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree_Request_MakeDirectory::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_MakeDirectory::~ReadWriteTree_Request_MakeDirectory() {
  SharedDtor();
}

void ReadWriteTree_Request_MakeDirectory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_MakeDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_MakeDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_MakeDirectory_descriptor_;
}

const ReadWriteTree_Request_MakeDirectory& ReadWriteTree_Request_MakeDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_MakeDirectory* ReadWriteTree_Request_MakeDirectory::default_instance_ = NULL;

ReadWriteTree_Request_MakeDirectory* ReadWriteTree_Request_MakeDirectory::New() const {
  return new ReadWriteTree_Request_MakeDirectory;
}

void ReadWriteTree_Request_MakeDirectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_MakeDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadWriteTree_Request_MakeDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree_Request_MakeDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree_Request_MakeDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_MakeDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_MakeDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_MakeDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_MakeDirectory::MergeFrom(const ReadWriteTree_Request_MakeDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_MakeDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_MakeDirectory::CopyFrom(const ReadWriteTree_Request_MakeDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_MakeDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Request_MakeDirectory::Swap(ReadWriteTree_Request_MakeDirectory* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_MakeDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_MakeDirectory_descriptor_;
  metadata.reflection = ReadWriteTree_Request_MakeDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request_RemoveDirectory::kPathFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_RemoveDirectory::ReadWriteTree_Request_RemoveDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree_Request_RemoveDirectory::InitAsDefaultInstance() {
}

ReadWriteTree_Request_RemoveDirectory::ReadWriteTree_Request_RemoveDirectory(const ReadWriteTree_Request_RemoveDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree_Request_RemoveDirectory::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_RemoveDirectory::~ReadWriteTree_Request_RemoveDirectory() {
  SharedDtor();
}

void ReadWriteTree_Request_RemoveDirectory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_RemoveDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_RemoveDirectory_descriptor_;
}

const ReadWriteTree_Request_RemoveDirectory& ReadWriteTree_Request_RemoveDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_RemoveDirectory* ReadWriteTree_Request_RemoveDirectory::default_instance_ = NULL;

ReadWriteTree_Request_RemoveDirectory* ReadWriteTree_Request_RemoveDirectory::New() const {
  return new ReadWriteTree_Request_RemoveDirectory;
}

void ReadWriteTree_Request_RemoveDirectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_RemoveDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadWriteTree_Request_RemoveDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree_Request_RemoveDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree_Request_RemoveDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_RemoveDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_RemoveDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_RemoveDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_RemoveDirectory::MergeFrom(const ReadWriteTree_Request_RemoveDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_RemoveDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_RemoveDirectory::CopyFrom(const ReadWriteTree_Request_RemoveDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_RemoveDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Request_RemoveDirectory::Swap(ReadWriteTree_Request_RemoveDirectory* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_RemoveDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_RemoveDirectory_descriptor_;
  metadata.reflection = ReadWriteTree_Request_RemoveDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request_Write::kPathFieldNumber;
const int ReadWriteTree_Request_Write::kContentsFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_Write::ReadWriteTree_Request_Write()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree_Request_Write::InitAsDefaultInstance() {
}

ReadWriteTree_Request_Write::ReadWriteTree_Request_Write(const ReadWriteTree_Request_Write& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree_Request_Write::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_Write::~ReadWriteTree_Request_Write() {
  SharedDtor();
}

void ReadWriteTree_Request_Write::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_Write::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_Write::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_Write_descriptor_;
}

const ReadWriteTree_Request_Write& ReadWriteTree_Request_Write::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_Write* ReadWriteTree_Request_Write::default_instance_ = NULL;

ReadWriteTree_Request_Write* ReadWriteTree_Request_Write::New() const {
  return new ReadWriteTree_Request_Write;
}

void ReadWriteTree_Request_Write::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_Write::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // required bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadWriteTree_Request_Write::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree_Request_Write::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree_Request_Write::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_Write::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_Write* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_Write*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_Write::MergeFrom(const ReadWriteTree_Request_Write& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_Write::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_Write::CopyFrom(const ReadWriteTree_Request_Write& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_Write::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadWriteTree_Request_Write::Swap(ReadWriteTree_Request_Write* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_Write::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_Write_descriptor_;
  metadata.reflection = ReadWriteTree_Request_Write_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request_RemoveFile::kPathFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_RemoveFile::ReadWriteTree_Request_RemoveFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree_Request_RemoveFile::InitAsDefaultInstance() {
}

ReadWriteTree_Request_RemoveFile::ReadWriteTree_Request_RemoveFile(const ReadWriteTree_Request_RemoveFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree_Request_RemoveFile::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_RemoveFile::~ReadWriteTree_Request_RemoveFile() {
  SharedDtor();
}

void ReadWriteTree_Request_RemoveFile::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_RemoveFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_RemoveFile_descriptor_;
}

const ReadWriteTree_Request_RemoveFile& ReadWriteTree_Request_RemoveFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_RemoveFile* ReadWriteTree_Request_RemoveFile::default_instance_ = NULL;

ReadWriteTree_Request_RemoveFile* ReadWriteTree_Request_RemoveFile::New() const {
  return new ReadWriteTree_Request_RemoveFile;
}

void ReadWriteTree_Request_RemoveFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_RemoveFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadWriteTree_Request_RemoveFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree_Request_RemoveFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree_Request_RemoveFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_RemoveFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_RemoveFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_RemoveFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_RemoveFile::MergeFrom(const ReadWriteTree_Request_RemoveFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_RemoveFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_RemoveFile::CopyFrom(const ReadWriteTree_Request_RemoveFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_RemoveFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Request_RemoveFile::Swap(ReadWriteTree_Request_RemoveFile* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_RemoveFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_RemoveFile_descriptor_;
  metadata.reflection = ReadWriteTree_Request_RemoveFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request::kExactlyOnceFieldNumber;
const int ReadWriteTree_Request::kConditionFieldNumber;
const int ReadWriteTree_Request::kMakeDirectoryFieldNumber;
const int ReadWriteTree_Request::kRemoveDirectoryFieldNumber;
const int ReadWriteTree_Request::kWriteFieldNumber;
const int ReadWriteTree_Request::kRemoveFileFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request::ReadWriteTree_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree_Request::InitAsDefaultInstance() {
  exactly_once_ = const_cast< ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo*>(&::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::default_instance());
  condition_ = const_cast< ::LogCabin::Protocol::Client::TreeCondition*>(&::LogCabin::Protocol::Client::TreeCondition::default_instance());
  make_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::default_instance());
  remove_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::default_instance());
  write_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::default_instance());
  remove_file_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::default_instance());
}

ReadWriteTree_Request::ReadWriteTree_Request(const ReadWriteTree_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree_Request::SharedCtor() {
  _cached_size_ = 0;
  exactly_once_ = NULL;
  condition_ = NULL;
  make_directory_ = NULL;
  remove_directory_ = NULL;
  write_ = NULL;
  remove_file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request::~ReadWriteTree_Request() {
  SharedDtor();
}

void ReadWriteTree_Request::SharedDtor() {
  if (this != default_instance_) {
    delete exactly_once_;
    delete condition_;
    delete make_directory_;
    delete remove_directory_;
    delete write_;
    delete remove_file_;
  }
}

void ReadWriteTree_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_descriptor_;
}

const ReadWriteTree_Request& ReadWriteTree_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request* ReadWriteTree_Request::default_instance_ = NULL;

ReadWriteTree_Request* ReadWriteTree_Request::New() const {
  return new ReadWriteTree_Request;
}

void ReadWriteTree_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_exactly_once()) {
      if (exactly_once_ != NULL) exactly_once_->::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::Clear();
    }
    if (has_condition()) {
      if (condition_ != NULL) condition_->::LogCabin::Protocol::Client::TreeCondition::Clear();
    }
    if (has_make_directory()) {
      if (make_directory_ != NULL) make_directory_->::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::Clear();
    }
    if (has_remove_directory()) {
      if (remove_directory_ != NULL) remove_directory_->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::Clear();
    }
    if (has_write()) {
      if (write_ != NULL) write_->::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::Clear();
    }
    if (has_remove_file()) {
      if (remove_file_ != NULL) remove_file_->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_directory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remove_directory;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_directory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_write;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_remove_file;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_exactly_once;
        break;
      }

      // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exactly_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exactly_once()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_condition;
        break;
      }

      // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadWriteTree_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
  if (has_make_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->make_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
  if (has_remove_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remove_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
  if (has_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->write(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
  if (has_remove_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->remove_file(), output);
  }

  // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
  if (has_exactly_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->exactly_once(), output);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
  if (has_make_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->make_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
  if (has_remove_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remove_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
  if (has_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->write(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
  if (has_remove_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->remove_file(), target);
  }

  // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
  if (has_exactly_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->exactly_once(), target);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
    if (has_exactly_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exactly_once());
    }

    // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
    if (has_make_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
    if (has_remove_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
    if (has_write()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
    if (has_remove_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request::MergeFrom(const ReadWriteTree_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exactly_once()) {
      mutable_exactly_once()->::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::MergeFrom(from.exactly_once());
    }
    if (from.has_condition()) {
      mutable_condition()->::LogCabin::Protocol::Client::TreeCondition::MergeFrom(from.condition());
    }
    if (from.has_make_directory()) {
      mutable_make_directory()->::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::MergeFrom(from.make_directory());
    }
    if (from.has_remove_directory()) {
      mutable_remove_directory()->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::MergeFrom(from.remove_directory());
    }
    if (from.has_write()) {
      mutable_write()->::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::MergeFrom(from.write());
    }
    if (from.has_remove_file()) {
      mutable_remove_file()->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::MergeFrom(from.remove_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request::CopyFrom(const ReadWriteTree_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_exactly_once()) {
    if (!this->exactly_once().IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_make_directory()) {
    if (!this->make_directory().IsInitialized()) return false;
  }
  if (has_remove_directory()) {
    if (!this->remove_directory().IsInitialized()) return false;
  }
  if (has_write()) {
    if (!this->write().IsInitialized()) return false;
  }
  if (has_remove_file()) {
    if (!this->remove_file().IsInitialized()) return false;
  }
  return true;
}

void ReadWriteTree_Request::Swap(ReadWriteTree_Request* other) {
  if (other != this) {
    std::swap(exactly_once_, other->exactly_once_);
    std::swap(condition_, other->condition_);
    std::swap(make_directory_, other->make_directory_);
    std::swap(remove_directory_, other->remove_directory_);
    std::swap(write_, other->write_);
    std::swap(remove_file_, other->remove_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_descriptor_;
  metadata.reflection = ReadWriteTree_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Response::kStatusFieldNumber;
const int ReadWriteTree_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Response::ReadWriteTree_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree_Response::InitAsDefaultInstance() {
}

ReadWriteTree_Response::ReadWriteTree_Response(const ReadWriteTree_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree_Response::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Response::~ReadWriteTree_Response() {
  SharedDtor();
}

void ReadWriteTree_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Response_descriptor_;
}

const ReadWriteTree_Response& ReadWriteTree_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Response* ReadWriteTree_Response::default_instance_ = NULL;

ReadWriteTree_Response* ReadWriteTree_Response::New() const {
  return new ReadWriteTree_Response;
}

void ReadWriteTree_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogCabin.Protocol.Client.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Client::Status_IsValid(value)) {
            set_status(static_cast< ::LogCabin::Protocol::Client::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadWriteTree_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Client.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Response::MergeFrom(const ReadWriteTree_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Response::CopyFrom(const ReadWriteTree_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Response::Swap(ReadWriteTree_Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Response_descriptor_;
  metadata.reflection = ReadWriteTree_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReadWriteTree::ReadWriteTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadWriteTree::InitAsDefaultInstance() {
}

ReadWriteTree::ReadWriteTree(const ReadWriteTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadWriteTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree::~ReadWriteTree() {
  SharedDtor();
}

void ReadWriteTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadWriteTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_descriptor_;
}

const ReadWriteTree& ReadWriteTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree* ReadWriteTree::default_instance_ = NULL;

ReadWriteTree* ReadWriteTree::New() const {
  return new ReadWriteTree;
}

void ReadWriteTree::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReadWriteTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadWriteTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadWriteTree::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree::MergeFrom(const ReadWriteTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree::CopyFrom(const ReadWriteTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree::IsInitialized() const {

  return true;
}

void ReadWriteTree::Swap(ReadWriteTree* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_descriptor_;
  metadata.reflection = ReadWriteTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kNanosecondsSinceEpochFieldNumber;
const int Command::kOpenSessionFieldNumber;
const int Command::kTreeFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  open_session_ = const_cast< ::LogCabin::Protocol::Client::OpenSession_Request*>(&::LogCabin::Protocol::Client::OpenSession_Request::default_instance());
  tree_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  nanoseconds_since_epoch_ = GOOGLE_ULONGLONG(0);
  open_session_ = NULL;
  tree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete open_session_;
    delete tree_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nanoseconds_since_epoch_ = GOOGLE_ULONGLONG(0);
    if (has_open_session()) {
      if (open_session_ != NULL) open_session_->::LogCabin::Protocol::Client::OpenSession_Request::Clear();
    }
    if (has_tree()) {
      if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadWriteTree_Request::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nanoseconds_since_epoch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanoseconds_since_epoch_)));
          set_has_nanoseconds_since_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_open_session;
        break;
      }

      // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tree;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nanoseconds_since_epoch = 1;
  if (has_nanoseconds_since_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nanoseconds_since_epoch(), output);
  }

  // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 4;
  if (has_open_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->open_session(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 5;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nanoseconds_since_epoch = 1;
  if (has_nanoseconds_since_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nanoseconds_since_epoch(), target);
  }

  // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 4;
  if (has_open_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->open_session(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 5;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nanoseconds_since_epoch = 1;
    if (has_nanoseconds_since_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nanoseconds_since_epoch());
    }

    // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 4;
    if (has_open_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_session());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 5;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nanoseconds_since_epoch()) {
      set_nanoseconds_since_epoch(from.nanoseconds_since_epoch());
    }
    if (from.has_open_session()) {
      mutable_open_session()->::LogCabin::Protocol::Client::OpenSession_Request::MergeFrom(from.open_session());
    }
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::Client::ReadWriteTree_Request::MergeFrom(from.tree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(nanoseconds_since_epoch_, other->nanoseconds_since_epoch_);
    std::swap(open_session_, other->open_session_);
    std::swap(tree_, other->tree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandResponse::kOpenSessionFieldNumber;
const int CommandResponse::kTreeFieldNumber;
#endif  // !_MSC_VER

CommandResponse::CommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandResponse::InitAsDefaultInstance() {
  open_session_ = const_cast< ::LogCabin::Protocol::Client::OpenSession_Response*>(&::LogCabin::Protocol::Client::OpenSession_Response::default_instance());
  tree_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Response*>(&::LogCabin::Protocol::Client::ReadWriteTree_Response::default_instance());
}

CommandResponse::CommandResponse(const CommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandResponse::SharedCtor() {
  _cached_size_ = 0;
  open_session_ = NULL;
  tree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandResponse::~CommandResponse() {
  SharedDtor();
}

void CommandResponse::SharedDtor() {
  if (this != default_instance_) {
    delete open_session_;
    delete tree_;
  }
}

void CommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandResponse_descriptor_;
}

const CommandResponse& CommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2fProtocol_2fClient_2eproto();
  return *default_instance_;
}

CommandResponse* CommandResponse::default_instance_ = NULL;

CommandResponse* CommandResponse::New() const {
  return new CommandResponse;
}

void CommandResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_open_session()) {
      if (open_session_ != NULL) open_session_->::LogCabin::Protocol::Client::OpenSession_Response::Clear();
    }
    if (has_tree()) {
      if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadWriteTree_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tree;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 4;
  if (has_open_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->open_session(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 5;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 4;
  if (has_open_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->open_session(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 5;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 4;
    if (has_open_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_session());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 5;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandResponse::MergeFrom(const CommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_session()) {
      mutable_open_session()->::LogCabin::Protocol::Client::OpenSession_Response::MergeFrom(from.open_session());
    }
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::Client::ReadWriteTree_Response::MergeFrom(from.tree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {

  if (has_open_session()) {
    if (!this->open_session().IsInitialized()) return false;
  }
  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  return true;
}

void CommandResponse::Swap(CommandResponse* other) {
  if (other != this) {
    std::swap(open_session_, other->open_session_);
    std::swap(tree_, other->tree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandResponse_descriptor_;
  metadata.reflection = CommandResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client
}  // namespace Protocol
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
